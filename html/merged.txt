admin/fx.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FX Rates - RiskPay Admin</title>
  <link rel="stylesheet" href="../css/main.css">
  <style>
    /* Simple modal styling */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }
    
    .modal-content {
      background-color: white;
      margin: 10% auto;
      padding: 20px;
      width: 80%;
      max-width: 600px;
      border-radius: 5px;
    }
    
    .close-modal {
      float: right;
      cursor: pointer;
      font-size: 20px;
    }
    
    .fx-card {
      background-color: #f9f9f9;
      border: 1px solid #ddd;
      padding: 15px;
      margin-bottom: 15px;
      border-radius: 5px;
    }
    
    .fx-action-buttons {
      margin-top: 15px;
      display: flex;
      gap: 10px;
    }
    
    .rate-history {
      margin-top: 20px;
    }
    
    .rate-history table {
      width: 100%;
      border-collapse: collapse;
    }
    
    .rate-history th, .rate-history td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    
    .rate-history th {
      background-color: #f2f2f2;
    }
    
    .rate-history tr:nth-child(even) {
      background-color: #f9f9f9;
    }
  </style>
</head>
<body>
  <div class="container">
    <div id="alert-container"></div>
    
    <header>
      <h1>FX Rates Management</h1>
      <nav>
        <ul>
          <li><a href="index.html">Dashboard</a></li>
          <li><a href="users.html">Users</a></li>
        </ul>
      </nav>
    </header>
    
    <section class="section">
      <h2>Current FX Settings</h2>
      <div class="card" id="fx-settings-card">
        <!-- FX settings will be loaded here -->
        <div class="loading">Loading settings...</div>
      </div>
      
      <button id="edit-settings-btn" class="button">Edit FX Settings</button>
    </section>
    
    <section class="section">
      <h2>Active Exchange Rates</h2>
      <div id="fx-rates-container">
        <!-- FX rates will be loaded here -->
        <div class="loading">Loading rates...</div>
      </div>
      
      <div class="fx-action-buttons">
        <button id="add-rate-btn" class="button">Add New Rate</button>
        <button id="refresh-all-rates-btn" class="button">Refresh All Rates</button>
      </div>
    </section>
    
    <!-- Edit FX Settings Modal -->
    <div id="edit-settings-modal" class="modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2>Edit FX Settings</h2>
        
        <form id="edit-settings-form">
          <div class="form-group">
            <label for="default-spread">Default FX Spread (%)</label>
            <input type="number" id="default-spread" min="0" max="10" step="0.1" required>
            <small>Default spread percentage applied to all currency conversions (0-10%)</small>
          </div>
          
          <div class="form-group">
            <label>
              <input type="checkbox" id="auto-fx-update"> Enable Automatic FX Updates
            </label>
            <small>When enabled, FX rates will be automatically updated daily from external sources</small>
          </div>
          
          <button type="submit" id="update-settings-btn">Update Settings</button>
        </form>
      </div>
    </div>
    
    <!-- Add New Rate Modal -->
    <div id="add-rate-modal" class="modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2>Add New Exchange Rate</h2>
        
        <form id="add-rate-form">
          <div class="form-group">
            <label for="base-currency">Base Currency</label>
            <select id="base-currency" required>
              <option value="USD">USD</option>
              <option value="BRL">BRL</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="quote-currency">Quote Currency</label>
            <select id="quote-currency" required>
              <option value="BRL">BRL</option>
              <option value="USD">USD</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="rate-value">Exchange Rate</label>
            <input type="number" id="rate-value" min="0.000001" step="0.000001" required>
            <small>Rate for converting from Base to Quote currency</small>
          </div>
          
          <button type="submit" id="submit-rate-btn">Add Rate</button>
        </form>
      </div>
    </div>
  </div>
  
  <script src="../js/utils.js"></script>
  <script src="../js/admin.js"></script>
  <script src="../js/admin-fx.js"></script>
</body>
</html>

admin/user-details.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Details - RiskPay Admin</title>
  <link rel="stylesheet" href="../css/main.css">
  <style>
    /* Simple modal styling */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }
    
    .modal-content {
      background-color: white;
      margin: 10% auto;
      padding: 20px;
      width: 80%;
      max-width: 600px;
      border-radius: 5px;
    }
    
    .close-modal {
      float: right;
      cursor: pointer;
      font-size: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div id="alert-container"></div>
    
    <header>
      <h1>User Details</h1>
      <a href="users.html" class="button">Back to Users</a>
    </header>
    
    <div id="user-details">
      <!-- User details will be loaded here -->
    </div>
    
    <!-- Suspend User Modal -->
    <div id="suspend-user-modal" class="modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2>Suspend User</h2>
        
        <form id="suspend-user-form">
          <input type="hidden" id="suspend-user-id">
          
          <div class="form-group">
            <label for="suspend-until">Suspend Until</label>
            <input type="date" id="suspend-until" required>
            <small>User will be automatically reactivated after this date</small>
          </div>
          
          <button type="submit">Suspend User</button>
        </form>
      </div>
    </div>
    
    <!-- Edit User Modal -->
    <div id="edit-user-modal" class="modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2>Edit User</h2>
        
        <form id="edit-user-form">
          <input type="hidden" id="edit-user-id">
          
          <div class="form-group">
            <label for="edit-user-email">Email</label>
            <input type="email" id="edit-user-email">
          </div>
          
          <div class="form-group">
            <label for="edit-user-role">Role</label>
            <select id="edit-user-role">
              <option value="merchant">Merchant</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="edit-user-status">Status</label>
            <select id="edit-user-status">
              <option value="active">Active</option>
              <option value="suspended">Suspended</option>
              <option value="blocked">Blocked</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="edit-user-id-check-status">ID Verification Status</label>
            <select id="edit-user-id-check-status">
              <option value="">Not Started</option>
              <option value="pending">Pending</option>
              <option value="verified">Verified</option>
              <option value="rejected">Rejected</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="edit-user-email-verified">Email Verified</label>
            <select id="edit-user-email-verified">
              <option value="true">Yes</option>
              <option value="false">No</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="edit-user-business-name">Business Name</label>
            <input type="text" id="edit-user-business-name">
          </div>
          
          <div class="form-group">
            <label for="edit-user-country">Country</label>
            <select id="edit-user-country">
              <option value="US">United States</option>
              <option value="BR">Brazil</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="edit-user-selling-method">Selling Method</label>
            <select id="edit-user-selling-method">
              <option value="hosted_store">Hosted Store</option>
              <option value="integration">Integration</option>
            </select>
          </div>
          
          <button type="submit" id="update-user-btn">Update User</button>
        </form>
      </div>
    </div>
  </div>
  
  <script src="../js/utils.js"></script>
  <script src="../js/admin.js"></script>
</body>
</html>

admin/users.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Management - RiskPay Admin</title>
  <link rel="stylesheet" href="../css/main.css">
  <style>
    /* Simple modal styling */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }
    
    .modal-content {
      background-color: white;
      margin: 10% auto;
      padding: 20px;
      width: 80%;
      max-width: 600px;
      border-radius: 5px;
    }
    
    .close-modal {
      float: right;
      cursor: pointer;
      font-size: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div id="alert-container"></div>
    
    <header>
      <h1>User Management</h1>
    </header>
    
    <div class="card" style="margin-bottom: 20px;">
      <h3>Filter Users</h3>
      <form id="user-search-form">
        <div class="row">
          <div class="col">
            <div class="form-group">
              <label for="filter-status">Status</label>
              <select id="filter-status">
                <option value="all">All</option>
                <option value="active">Active</option>
                <option value="suspended">Suspended</option>
                <option value="blocked">Blocked</option>
                <option value="verified">Verified</option>
                <option value="pending">Pending Verification</option>
                <option value="rejected">Rejected Verification</option>
              </select>
            </div>
          </div>
          <div class="col">
            <div class="form-group">
              <label for="search-query">Search</label>
              <input type="text" id="search-query" placeholder="Email or merchant name">
            </div>
          </div>
        </div>
        
        <div>
          <button type="submit">Search</button>
          <button type="button" id="reset-search-btn">Reset</button>
        </div>
      </form>
    </div>
    
    <div id="users-list">
      <!-- Users will be loaded here -->
    </div>
    
    <!-- Suspend User Modal -->
    <div id="suspend-user-modal" class="modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2>Suspend User</h2>
        
        <form id="suspend-user-form">
          <input type="hidden" id="suspend-user-id">
          
          <div class="form-group">
            <label for="suspend-until">Suspend Until</label>
            <input type="date" id="suspend-until" required>
            <small>User will be automatically reactivated after this date</small>
          </div>
          
          <button type="submit">Suspend User</button>
        </form>
      </div>
    </div>
  </div>
  
  <script src="../js/utils.js"></script>
  <script src="../js/admin.js"></script>
</body>
</html>

admin/verification-details.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Verification Details - RiskPay Admin</title>
  <link rel="stylesheet" href="../css/main.css">
</head>
<body>
  <div class="container">
    <div id="alert-container"></div>
    
    <header>
      <h1>Verification Details</h1>
      <a href="verifications.html" class="button">Back to Verifications</a>
    </header>
    
    <div id="verification-details">
      <!-- Verification details will be loaded here -->
    </div>
  </div>
  
  <script src="../js/utils.js"></script>
  <script src="../js/admin.js"></script>
</body>
</html>

admin/verifications.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Verifications - RiskPay Admin</title>
  <link rel="stylesheet" href="../css/main.css">
</head>
<body>
  <div class="container">
    <div id="alert-container"></div>
    
    <header>
      <h1>Merchant Verifications</h1>
    </header>
    
    <div class="card" style="margin-bottom: 20px;">
      <div class="row">
        <div class="col">
          <button id="pending-tab" class="button">Pending Verifications</button>
        </div>
        <div class="col">
          <button id="rejected-tab" class="button">Rejected Verifications</button>
        </div>
      </div>
    </div>
    
    <div id="verifications-list">
      <!-- Verifications will be loaded here -->
    </div>
  </div>
  
  <script src="../js/utils.js"></script>
  <script src="../js/admin.js"></script>
</body>
</html>

admin-login.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Login - RiskPay</title>
  <link rel="stylesheet" href="css/main.css">
</head>
<body>
  <div class="container">
    <header>
      <h1>RiskPay Admin</h1>
      <nav>
        <ul>
          <li><a href="login.html">Merchant Login</a></li>
        </ul>
      </nav>
    </header>
    
    <div id="alert-container"></div>
    
    <div class="card" style="max-width: 500px; margin: 0 auto;">
      <h2>Admin Login</h2>
      <form id="admin-login-form">
        <div class="form-group">
          <label for="username">Username</label>
          <input type="text" id="username" required>
        </div>
        
        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" required>
        </div>
        
        <div class="form-group">
          <label for="access-key">Access Key (optional, required for full access)</label>
          <input type="password" id="access-key">
        </div>
        
        <button type="submit" id="login-btn">Login</button>
      </form>
      
      <p style="margin-top: 20px;">
        <a href="login.html">Go to Merchant Login</a>
      </p>
    </div>
  </div>
  
  <script src="js/utils.js"></script>
  <script src="js/auth.js"></script>
</body>
</html>

crr.js
// merge.js
const fs = require('fs').promises;
const path = require('path');
const readline = require('readline');

// Only include these extensions
const ALLOWED_EXT = new Set(['.js', '.html', '.env','.ts','.tsx',]);
// Directory names to ignore
const IGNORE_DIR = new Set(['node_modules','.next','public']);

async function collectFiles(dir, ignoreFiles) {
  let results = [];
  const entries = await fs.readdir(dir, { withFileTypes: true });

  for (let entry of entries) {
    const fullPath = path.join(dir, entry.name);

    if (entry.isDirectory()) {
      if (IGNORE_DIR.has(entry.name)) continue;
      results = results.concat(await collectFiles(fullPath, ignoreFiles));

    } else {
      const ext = path.extname(entry.name).toLowerCase();
      // skip unwanted extensions or explicitly ignored filenames
      if (ALLOWED_EXT.has(ext) && !ignoreFiles.has(entry.name)) {
        results.push(fullPath);
      }
    }
  }

  return results;
}

function askQuestion(query) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  return new Promise(resolve => {
    rl.question(query, answer => {
      rl.close();
      resolve(answer);
    });
  });
}

(async () => {
  try {
    // Ask the user whether to ignore specific filenames
    const ans = (await askQuestion('Ignore file names? (y/n): '))
      .trim()
      .toLowerCase();

    // Build a set of filenames to ignore
    let ignoreFiles = new Set();
    if (ans === 'y' || ans === 'yes') {
      const list = await askQuestion(
        'Enter file names to ignore, separated by commas (e.g. dhkm.js, djksm.js): '
      );
      list
        .split(',')
        .map(name => name.trim())
        .filter(name => name.length > 0)
        .forEach(name => ignoreFiles.add(name));
      console.log(`Ignoring files: ${[...ignoreFiles].join(', ')}`);
    }

    // Determine base directory
    const baseDir = process.argv[2]
      ? path.resolve(process.argv[2])
      : __dirname;
    console.log(`Scanning folder: ${baseDir}`);

    // Collect and filter files
    const files = await collectFiles(baseDir, ignoreFiles);

    if (files.length === 0) {
      console.log('No files to merge.');
      process.exit(0);
    }

    // Read and merge contents
    let merged = '';
    for (let filePath of files) {
      const content = await fs.readFile(filePath, 'utf8');
      const rel = path
        .relative(baseDir, filePath)
        .split(path.sep)
        .join('/');
      merged += `${rel}\n${content}\n\n`;
    }

    // Write out merged.txt
    const outPath = path.join(baseDir, 'merged.txt');
    await fs.writeFile(outPath, merged, 'utf8');
    console.log(`✅ Merged ${files.length} files into ${outPath}`);
  } catch (err) {
    console.error('Error:', err);
    process.exit(1);
  }
})();


js/admin-fx.js
// admin-fx.js - Handle FX rate management

// Load FX settings and rates
async function loadFxData() {
    try {
      // Load FX settings
      await loadFxSettings();
      
      // Load FX rates
      await loadFxRates();
    } catch (error) {
      console.error('Error loading FX data:', error);
      showAlert('Failed to load FX data', 'error');
    }
  }
  
  // Load FX settings
  async function loadFxSettings() {
    try {
      // Show loading
      const settingsCard = document.getElementById('fx-settings-card');
      if (settingsCard) {
        settingsCard.innerHTML = '<div class="loading">Loading settings...</div>';
      }
      
      // Get FX settings from API
      const result = await apiRequest('/admin/settings/fx', 'GET', null, false, true);
      
      if (result && result.success) {
        displayFxSettings(result.data.settings);
      } else {
        if (settingsCard) {
          settingsCard.innerHTML = '<p>Failed to load FX settings</p>';
        }
      }
    } catch (error) {
      console.error('Error loading FX settings:', error);
      const settingsCard = document.getElementById('fx-settings-card');
      if (settingsCard) {
        settingsCard.innerHTML = '<p>Error loading FX settings</p>';
      }
    }
  }
  
  // Display FX settings
  function displayFxSettings(settings) {
    const settingsCard = document.getElementById('fx-settings-card');
    if (!settingsCard) return;
    
    // Create settings display
    settingsCard.innerHTML = `
      <div>
        <h3>Global FX Settings</h3>
        <p><strong>Default FX Spread:</strong> ${settings.defaultSpread || 1.9}%</p>
        <p><strong>Automatic FX Updates:</strong> ${settings.autoFxUpdate ? 'Enabled' : 'Disabled'}</p>
        <p><small>These settings apply to all merchants unless overridden at the merchant level</small></p>
      </div>
    `;
    
    // Populate edit form with current values
    document.getElementById('default-spread').value = settings.defaultSpread || 1.9;
    document.getElementById('auto-fx-update').checked = settings.autoFxUpdate || false;
  }
  
  // Load FX rates
  async function loadFxRates() {
    try {
      // Show loading
      const ratesContainer = document.getElementById('fx-rates-container');
      if (ratesContainer) {
        ratesContainer.innerHTML = '<div class="loading">Loading rates...</div>';
      }
      
      // Get FX rates from API
      const result = await apiRequest('/admin/finance/fx-rates', 'GET', null, false, true);
      
      if (result && result.success) {
        displayFxRates(result.data);
      } else {
        if (ratesContainer) {
          ratesContainer.innerHTML = '<p>Failed to load FX rates</p>';
        }
      }
    } catch (error) {
      console.error('Error loading FX rates:', error);
      const ratesContainer = document.getElementById('fx-rates-container');
      if (ratesContainer) {
        ratesContainer.innerHTML = '<p>Error loading FX rates</p>';
      }
    }
  }
  
  // Display FX rates
  function displayFxRates(data) {
    const ratesContainer = document.getElementById('fx-rates-container');
    if (!ratesContainer) return;
    
    // Clear content
    ratesContainer.innerHTML = '';
    
    if (!data.rates || data.rates.length === 0) {
      ratesContainer.innerHTML = '<p>No exchange rates found. Add rates using the button below.</p>';
      return;
    }
    
    // Create rate cards
    data.rates.forEach(rate => {
      const rateCard = document.createElement('div');
      rateCard.className = 'fx-card';
      
      // Format rate with 6 decimal places
      const formattedRate = rate.rate.toFixed(6);
      
      // Format time
      const fetchedAt = new Date(rate.fetchedAt);
      const formattedTime = fetchedAt.toLocaleString();
      
      // Build card content
      rateCard.innerHTML = `
        <h3>${rate.baseCurrency} to ${rate.quoteCurrency}</h3>
        <p><strong>Rate:</strong> ${formattedRate}</p>
        <p><strong>1 ${rate.baseCurrency} = ${formattedRate} ${rate.quoteCurrency}</strong></p>
        <p><small>Last updated: ${formattedTime}</small></p>
        <p><small>Source: ${rate.source || 'Manual'}</small></p>
        
        <button class="update-rate-btn" 
          data-base="${rate.baseCurrency}" 
          data-quote="${rate.quoteCurrency}" 
          data-rate="${rate.rate}">
          Update Rate
        </button>
      `;
      
      ratesContainer.appendChild(rateCard);
    });
    
    // Add event listeners for update buttons
    const updateButtons = document.querySelectorAll('.update-rate-btn');
    updateButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Get data attributes
        const baseCurrency = this.getAttribute('data-base');
        const quoteCurrency = this.getAttribute('data-quote');
        const currentRate = this.getAttribute('data-rate');
        
        // Populate add rate form with current values
        document.getElementById('base-currency').value = baseCurrency;
        document.getElementById('quote-currency').value = quoteCurrency;
        document.getElementById('rate-value').value = currentRate;
        
        // Change button text to indicate update
        document.getElementById('submit-rate-btn').textContent = 'Update Rate';
        
        // Show modal
        document.getElementById('add-rate-modal').style.display = 'block';
      });
    });
  }
  
  // Update FX settings
  async function updateFxSettings(event) {
    event.preventDefault();
    
    // Get form values
    const defaultSpread = parseFloat(document.getElementById('default-spread').value);
    const autoFxUpdate = document.getElementById('auto-fx-update').checked;
    
    // Validate input
    if (isNaN(defaultSpread) || defaultSpread < 0 || defaultSpread > 10) {
      showAlert('Default spread must be a number between 0 and 10', 'error');
      return;
    }
    
    try {
      const updateBtn = document.getElementById('update-settings-btn');
      updateBtn.disabled = true;
      updateBtn.textContent = 'Updating...';
      
      // Update settings
      const result = await apiRequest('/admin/settings/fx', 'PATCH', {
        defaultSpread,
        autoFxUpdate
      }, false, true);
      
      if (result && result.success) {
        showAlert('FX settings updated successfully', 'success');
        
        // Close modal
        document.getElementById('edit-settings-modal').style.display = 'none';
        
        // Reload settings
        loadFxSettings();
      } else {
        showAlert(result?.message || 'Failed to update FX settings', 'error');
      }
      
      updateBtn.disabled = false;
      updateBtn.textContent = 'Update Settings';
    } catch (error) {
      console.error('Error updating FX settings:', error);
      showAlert('Error updating FX settings', 'error');
      
      const updateBtn = document.getElementById('update-settings-btn');
      updateBtn.disabled = false;
      updateBtn.textContent = 'Update Settings';
    }
  }
  
  // Add or update FX rate
  async function addOrUpdateRate(event) {
    event.preventDefault();
    
    // Get form values
    const baseCurrency = document.getElementById('base-currency').value;
    const quoteCurrency = document.getElementById('quote-currency').value;
    const rate = parseFloat(document.getElementById('rate-value').value);
    
    // Validate input
    if (baseCurrency === quoteCurrency) {
      showAlert('Base and quote currencies must be different', 'error');
      return;
    }
    
    if (isNaN(rate) || rate <= 0) {
      showAlert('Rate must be a positive number', 'error');
      return;
    }
    
    try {
      const submitBtn = document.getElementById('submit-rate-btn');
      submitBtn.disabled = true;
      submitBtn.textContent = 'Processing...';
      
      // Add/update rate
      const result = await apiRequest('/admin/finance/fx-rates/update', 'POST', {
        baseCurrency,
        quoteCurrency,
        rate
      }, false, true);
      
      if (result && result.success) {
        showAlert('Exchange rate updated successfully', 'success');
        
        // Close modal
        document.getElementById('add-rate-modal').style.display = 'none';
        
        // Reset form
        document.getElementById('add-rate-form').reset();
        document.getElementById('submit-rate-btn').textContent = 'Add Rate';
        
        // Reload rates
        loadFxRates();
      } else {
        showAlert(result?.message || 'Failed to update exchange rate', 'error');
      }
      
      submitBtn.disabled = false;
      submitBtn.textContent = 'Add Rate';
    } catch (error) {
      console.error('Error updating FX rate:', error);
      showAlert('Error updating FX rate', 'error');
      
      const submitBtn = document.getElementById('submit-rate-btn');
      submitBtn.disabled = false;
      submitBtn.textContent = 'Add Rate';
    }
  }
  
  // Refresh all rates from external source
  async function refreshAllRates() {
    try {
      // Show confirmation dialog
      if (!confirm('This will refresh all exchange rates from external sources. Continue?')) {
        return;
      }
      
      const refreshBtn = document.getElementById('refresh-all-rates-btn');
      refreshBtn.disabled = true;
      refreshBtn.textContent = 'Refreshing...';
      
      // Refresh rates
      const result = await apiRequest('/admin/finance/fx-rates/refresh-all', 'POST', {}, false, true);
      
      if (result && result.success) {
        showAlert('All exchange rates refreshed successfully', 'success');
        
        // Reload rates
        loadFxRates();
      } else {
        showAlert(result?.message || 'Failed to refresh exchange rates', 'error');
      }
      
      refreshBtn.disabled = false;
      refreshBtn.textContent = 'Refresh All Rates';
    } catch (error) {
      console.error('Error refreshing exchange rates:', error);
      showAlert('Error refreshing exchange rates', 'error');
      
      const refreshBtn = document.getElementById('refresh-all-rates-btn');
      refreshBtn.disabled = false;
      refreshBtn.textContent = 'Refresh All Rates';
    }
  }
  
  // Initialize FX management page
  document.addEventListener('DOMContentLoaded', function() {
    // Create sidebar with active menu
    createSidebar('FX Rates');
    
    // Load FX data
    loadFxData();
    
    // Add event listener for edit settings button
    const editSettingsBtn = document.getElementById('edit-settings-btn');
    if (editSettingsBtn) {
      editSettingsBtn.addEventListener('click', function() {
        document.getElementById('edit-settings-modal').style.display = 'block';
      });
    }
    
    // Add event listener for edit settings form
    const editSettingsForm = document.getElementById('edit-settings-form');
    if (editSettingsForm) {
      editSettingsForm.addEventListener('submit', updateFxSettings);
    }
    
    // Add event listener for add rate button
    const addRateBtn = document.getElementById('add-rate-btn');
    if (addRateBtn) {
      addRateBtn.addEventListener('click', function() {
        // Reset form
        document.getElementById('add-rate-form').reset();
        document.getElementById('submit-rate-btn').textContent = 'Add Rate';
        
        // Show modal
        document.getElementById('add-rate-modal').style.display = 'block';
      });
    }
    
    // Add event listener for add rate form
    const addRateForm = document.getElementById('add-rate-form');
    if (addRateForm) {
      addRateForm.addEventListener('submit', addOrUpdateRate);
    }
    
    // Add event listener for refresh rates button
    const refreshRatesBtn = document.getElementById('refresh-all-rates-btn');
    if (refreshRatesBtn) {
      refreshRatesBtn.addEventListener('click', refreshAllRates);
    }
    
    // Add event listeners for modal close buttons
    const closeButtons = document.querySelectorAll('.close-modal');
    closeButtons.forEach(button => {
      button.addEventListener('click', function() {
        document.querySelectorAll('.modal').forEach(modal => {
          modal.style.display = 'none';
        });
      });
    });
    
    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
      document.querySelectorAll('.modal').forEach(modal => {
        if (event.target === modal) {
          modal.style.display = 'none';
        }
      });
    });
  });

js/admin.js
// Load admin dashboard data
async function loadAdminDashboard() {
    try {
      // Show loading
      showLoading('admin-dashboard-data');
      
      // In this simple version, we'll just fetch and display verifications and users summary
      
      // Fetch pending verifications
      const pendingVerificationsResult = await apiRequest('/admin/verifications/pending', 'GET', null, false, true);
      
      if (pendingVerificationsResult && pendingVerificationsResult.success) {
        // Display the count of pending verifications
        const pendingCount = pendingVerificationsResult.data.pendingVerifications.length;
        displayPendingCount(pendingCount);
      }
      
      // Fetch users
      const usersResult = await apiRequest('/admin/users', 'GET', null, false, true);
      
      if (usersResult && usersResult.success) {
        // Display user stats
        displayUserStats(usersResult.data.users);
      }
      
    } catch (error) {
      console.error('Error loading admin dashboard:', error);
      document.getElementById('admin-dashboard-data').innerHTML = '<p>Error loading dashboard data</p>';
    }
  }
  
  // Display pending verifications count
  function displayPendingCount(count) {
    const container = document.getElementById('pending-verifications-count');
    if (container) {
      container.textContent = count;
    }
  }
  
  // Display user statistics
  function displayUserStats(users) {
    const container = document.getElementById('user-stats');
    if (!container) return;
    
    // Count users by status
    const stats = {
      total: users.length,
      verified: 0,
      pending: 0,
      rejected: 0,
      active: 0,
      suspended: 0,
      blocked: 0
    };
    
    users.forEach(user => {
      if (user.idCheckStatus === 'verified') stats.verified++;
      if (user.idCheckStatus === 'pending') stats.pending++;
      if (user.idCheckStatus === 'rejected') stats.rejected++;
      if (user.status === 'active') stats.active++;
      if (user.status === 'suspended') stats.suspended++;
      if (user.status === 'blocked') stats.blocked++;
    });
    
    // Display stats
    container.innerHTML = `
      <p>Total Users: ${stats.total}</p>
      <p>Verified: ${stats.verified}</p>
      <p>Pending Verification: ${stats.pending}</p>
      <p>Rejected: ${stats.rejected}</p>
      <p>Active: ${stats.active}</p>
      <p>Suspended: ${stats.suspended}</p>
      <p>Blocked: ${stats.blocked}</p>
    `;
  }
  
  // Load pending verifications
  async function loadPendingVerifications() {
    try {
      // Show loading
      showLoading('verifications-list');
      
      // Fetch pending verifications
      const result = await apiRequest('/admin/verifications/pending', 'GET', null, false, true);
      
      if (result && result.success) {
        displayVerifications(result.data.pendingVerifications);
      } else {
        document.getElementById('verifications-list').innerHTML = '<p>Failed to load pending verifications</p>';
      }
    } catch (error) {
      console.error('Error loading pending verifications:', error);
      document.getElementById('verifications-list').innerHTML = '<p>Error loading pending verifications</p>';
    }
  }
  
  // Load rejected verifications
  async function loadRejectedVerifications() {
    try {
      // Show loading
      showLoading('verifications-list');
      
      // Fetch rejected verifications
      const result = await apiRequest('/admin/verifications/rejected', 'GET', null, false, true);
      
      if (result && result.success) {
        displayVerifications(result.data.rejectedVerifications);
      } else {
        document.getElementById('verifications-list').innerHTML = '<p>Failed to load rejected verifications</p>';
      }
    } catch (error) {
      console.error('Error loading rejected verifications:', error);
      document.getElementById('verifications-list').innerHTML = '<p>Error loading rejected verifications</p>';
    }
  }
  
  // Display verifications list
  function displayVerifications(verifications) {
    const container = document.getElementById('verifications-list');
    if (!container) return;
    
    // Clear content
    container.innerHTML = '';
    
    if (!verifications || verifications.length === 0) {
      container.innerHTML = '<p>No verifications found.</p>';
      return;
    }
    
    // Create table
    const table = document.createElement('table');
    
    // Table header
    const thead = document.createElement('thead');
    thead.innerHTML = `
      <tr>
        <th>ID</th>
        <th>Merchant</th>
        <th>Submitted</th>
        <th>Status</th>
        <th>Actions</th>
      </tr>
    `;
    table.appendChild(thead);
    
    // Table body
    const tbody = document.createElement('tbody');
    
    verifications.forEach(verification => {
      const tr = document.createElement('tr');
      
      tr.innerHTML = `
        <td>${verification._id}</td>
        <td>${verification.merchantId?.businessName || 'N/A'}</td>
        <td>${formatDate(verification.submittedAt)}</td>
        <td>${verification.status}</td>
        <td>
          <button class="view-btn" data-id="${verification._id}">View Details</button>
        </td>
      `;
      
      tbody.appendChild(tr);
    });
    
    table.appendChild(tbody);
    container.appendChild(table);
    
    // Add event listeners for view buttons
    const viewButtons = document.querySelectorAll('.view-btn');
    viewButtons.forEach(button => {
      button.addEventListener('click', function() {
        const verificationId = this.getAttribute('data-id');
        window.location.href = `verification-details.html?id=${verificationId}`;
      });
    });
  }
  
  // Load verification details
  async function loadVerificationDetails(verificationId) {
    try {
      // Show loading
      showLoading('verification-details');
      
      // Fetch verification details
      const result = await apiRequest(`/admin/verifications/${verificationId}`, 'GET', null, false, true);
      
      if (result && result.success) {
        displayVerificationDetails(result.data.verification);
      } else {
        document.getElementById('verification-details').innerHTML = '<p>Failed to load verification details</p>';
      }
    } catch (error) {
      console.error('Error loading verification details:', error);
      document.getElementById('verification-details').innerHTML = '<p>Error loading verification details</p>';
    }
  }
  
  // Display verification details
  function displayVerificationDetails(verification) {
    const container = document.getElementById('verification-details');
    if (!container) return;
    
    // Clear content
    container.innerHTML = '';
    
    // Create details content
    const details = document.createElement('div');
    
    // Basic info
    details.innerHTML = `
      <h3>Verification ID: ${verification._id}</h3>
      <p>Merchant: ${verification.merchantId?.businessName || 'N/A'}</p>
      <p>Email: ${verification.userId?.email || 'N/A'}</p>
      <p>Status: ${verification.status}</p>
      <p>Submitted: ${formatDate(verification.submittedAt)}</p>
    `;
    
    // Business document section
    const businessDoc = document.createElement('div');
    businessDoc.className = 'card';
    businessDoc.innerHTML = `
      <h3>Business Document</h3>
      <p>Type: ${verification.businessDocument.type}</p>
      <p>Number: ${verification.businessDocument.number}</p>
      <p>Status: ${verification.businessDocument.status}</p>
      ${verification.businessDocument.rejectionReason ? `<p>Rejection Reason: ${verification.businessDocument.rejectionReason}</p>` : ''}
      ${verification.businessDocument.documentImage ? `<p><a href="#" class="document-link" data-type="business" data-id="${verification._id}">View Document</a></p>` : ''}
      
      <div class="form-group">
        <label for="business-doc-status">Update Status</label>
        <select id="business-doc-status">
          <option value="pending" ${verification.businessDocument.status === 'pending' ? 'selected' : ''}>Pending</option>
          <option value="verified" ${verification.businessDocument.status === 'verified' ? 'selected' : ''}>Verified</option>
          <option value="rejected" ${verification.businessDocument.status === 'rejected' ? 'selected' : ''}>Rejected</option>
        </select>
      </div>
      
      <div class="form-group">
        <label for="business-doc-rejection-reason">Rejection Reason (if rejected)</label>
        <textarea id="business-doc-rejection-reason" rows="2">${verification.businessDocument.rejectionReason || ''}</textarea>
      </div>
    `;
    
    // Personal document section
    const personalDoc = document.createElement('div');
    personalDoc.className = 'card';
    personalDoc.innerHTML = `
      <h3>Personal Document</h3>
      <p>Type: ${verification.personalDocument.type}</p>
      <p>Number: ${verification.personalDocument.number}</p>
      <p>Status: ${verification.personalDocument.status}</p>
      ${verification.personalDocument.rejectionReason ? `<p>Rejection Reason: ${verification.personalDocument.rejectionReason}</p>` : ''}
      
      ${verification.personalDocument.frontImage ? `<p><a href="#" class="document-link" data-type="personal" data-field="front" data-id="${verification._id}">View Front</a></p>` : ''}
      ${verification.personalDocument.backImage ? `<p><a href="#" class="document-link" data-type="personal" data-field="back" data-id="${verification._id}">View Back</a></p>` : ''}
      ${verification.personalDocument.selfieImage ? `<p><a href="#" class="document-link" data-type="personal" data-field="selfie" data-id="${verification._id}">View Selfie</a></p>` : ''}
      
      <div class="form-group">
        <label for="personal-doc-status">Update Status</label>
        <select id="personal-doc-status">
          <option value="pending" ${verification.personalDocument.status === 'pending' ? 'selected' : ''}>Pending</option>
          <option value="verified" ${verification.personalDocument.status === 'verified' ? 'selected' : ''}>Verified</option>
          <option value="rejected" ${verification.personalDocument.status === 'rejected' ? 'selected' : ''}>Rejected</option>
        </select>
      </div>
      
      <div class="form-group">
        <label for="personal-doc-rejection-reason">Rejection Reason (if rejected)</label>
        <textarea id="personal-doc-rejection-reason" rows="2">${verification.personalDocument.rejectionReason || ''}</textarea>
      </div>
    `;
    
    // Bank details section
    const bankDetails = document.createElement('div');
    bankDetails.className = 'card';
    bankDetails.innerHTML = `
      <h3>Bank Details</h3>
      <p>Account Name: ${verification.bankDetails.accountName}</p>
      <p>Account Number: ${verification.bankDetails.accountNumber}</p>
      <p>Bank Name: ${verification.bankDetails.bankName}</p>
      ${verification.bankDetails.routingNumber ? `<p>Routing Number: ${verification.bankDetails.routingNumber}</p>` : ''}
      ${verification.bankDetails.bankBranch ? `<p>Bank Branch: ${verification.bankDetails.bankBranch}</p>` : ''}
      <p>Status: ${verification.bankDetails.status}</p>
      ${verification.bankDetails.rejectionReason ? `<p>Rejection Reason: ${verification.bankDetails.rejectionReason}</p>` : ''}
      
      ${verification.bankDetails.statementDocument ? `<p><a href="#" class="document-link" data-type="bank" data-id="${verification._id}">View Statement</a></p>` : ''}
      
      <div class="form-group">
        <label for="bank-details-status">Update Status</label>
        <select id="bank-details-status">
          <option value="pending" ${verification.bankDetails.status === 'pending' ? 'selected' : ''}>Pending</option>
          <option value="verified" ${verification.bankDetails.status === 'verified' ? 'selected' : ''}>Verified</option>
          <option value="rejected" ${verification.bankDetails.status === 'rejected' ? 'selected' : ''}>Rejected</option>
        </select>
      </div>
      
      <div class="form-group">
        <label for="bank-details-rejection-reason">Rejection Reason (if rejected)</label>
        <textarea id="bank-details-rejection-reason" rows="2">${verification.bankDetails.rejectionReason || ''}</textarea>
      </div>
    `;
    
    // Overall status section
    const overallStatus = document.createElement('div');
    overallStatus.className = 'card';
    overallStatus.innerHTML = `
      <h3>Overall Status</h3>
      
      <div class="form-group">
        <label for="overall-status">Update Overall Status</label>
        <select id="overall-status">
          <option value="pending" ${verification.status === 'pending' ? 'selected' : ''}>Pending</option>
          <option value="verified" ${verification.status === 'verified' ? 'selected' : ''}>Verified</option>
          <option value="rejected" ${verification.status === 'rejected' ? 'selected' : ''}>Rejected</option>
        </select>
      </div>
      
      <div class="form-group">
        <label for="rejection-note">Rejection Note (if rejected)</label>
        <textarea id="rejection-note" rows="3">${verification.rejectionNote || ''}</textarea>
      </div>
      
      <button id="update-verification-btn">Update Verification</button>
    `;
    
    // Add all sections to container
    container.appendChild(details);
    container.appendChild(businessDoc);
    container.appendChild(personalDoc);
    container.appendChild(bankDetails);
    container.appendChild(overallStatus);
    
    // Add event listener for document links
    const documentLinks = document.querySelectorAll('.document-link');
    documentLinks.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        
        const type = this.getAttribute('data-type');
        const id = this.getAttribute('data-id');
        const field = this.getAttribute('data-field');
        
        // Open document in new window
        let url = `/api/admin/documents/${type}/${id}`;
        if (field) {
          url += `/${field}`;
        }
        
        // Add admin token for authentication
        url += `?adminToken=${localStorage.getItem('admin_token')}`;
        
        window.open(url, '_blank');
      });
    });
    
    // Add event listener for update button
    const updateBtn = document.getElementById('update-verification-btn');
    if (updateBtn) {
      updateBtn.addEventListener('click', function() {
        updateVerification(verification._id);
      });
    }
  }
  
  // Update verification
  async function updateVerification(verificationId) {
    try {
      // Get form values
      const businessDocStatus = document.getElementById('business-doc-status').value;
      const businessDocRejectionReason = document.getElementById('business-doc-rejection-reason').value;
      const personalDocStatus = document.getElementById('personal-doc-status').value;
      const personalDocRejectionReason = document.getElementById('personal-doc-rejection-reason').value;
      const bankDetailsStatus = document.getElementById('bank-details-status').value;
      const bankDetailsRejectionReason = document.getElementById('bank-details-rejection-reason').value;
      const overallStatus = document.getElementById('overall-status').value;
      const rejectionNote = document.getElementById('rejection-note').value;
      
      // Prepare data
      const updateData = {
        businessDocStatus,
        personalDocStatus,
        bankDetailsStatus,
        overallStatus
      };
      
      // Add rejection reasons if status is rejected
      if (businessDocStatus === 'rejected' && businessDocRejectionReason) {
        updateData.businessDocRejectionReason = businessDocRejectionReason;
      }
      
      if (personalDocStatus === 'rejected' && personalDocRejectionReason) {
        updateData.personalDocRejectionReason = personalDocRejectionReason;
      }
      
      if (bankDetailsStatus === 'rejected' && bankDetailsRejectionReason) {
        updateData.bankDetailsRejectionReason = bankDetailsRejectionReason;
      }
      
      if (overallStatus === 'rejected' && rejectionNote) {
        updateData.rejectionNote = rejectionNote;
      }
      
      // Disable button
      const updateBtn = document.getElementById('update-verification-btn');
      if (updateBtn) {
        updateBtn.disabled = true;
        updateBtn.textContent = 'Updating...';
      }
      
      // Update verification
      const result = await apiRequest(`/admin/verifications/${verificationId}/update`, 'POST', updateData, false, true);
      
      if (result && result.success) {
        showAlert('Verification updated successfully', 'success');
        
        // Reload verification details
        loadVerificationDetails(verificationId);
      } else {
        showAlert(result?.message || 'Failed to update verification', 'error');
      }
      
      // Enable button
      if (updateBtn) {
        updateBtn.disabled = false;
        updateBtn.textContent = 'Update Verification';
      }
    } catch (error) {
      console.error('Error updating verification:', error);
      showAlert('Error updating verification', 'error');
      
      // Enable button
      const updateBtn = document.getElementById('update-verification-btn');
      if (updateBtn) {
        updateBtn.disabled = false;
        updateBtn.textContent = 'Update Verification';
      }
    }
  }
  
  // Load users
  async function loadUsers(filters = {}) {
    try {
      // Show loading
      showLoading('users-list');
      
      // Build query parameters
      let queryParams = '?';
      
      if (filters.status) {
        queryParams += `status=${filters.status}&`;
      }
      
      if (filters.search) {
        queryParams += `search=${filters.search}&`;
      }
      
      // Remove trailing & or ? if exists
      if (queryParams.endsWith('&') || queryParams.endsWith('?')) {
        queryParams = queryParams.slice(0, -1);
      }
      
      // Fetch users
      const result = await apiRequest(`/admin/users${queryParams}`, 'GET', null, false, true);
      
      if (result && result.success) {
        displayUsers(result.data.users);
      } else {
        document.getElementById('users-list').innerHTML = '<p>Failed to load users</p>';
      }
    } catch (error) {
      console.error('Error loading users:', error);
      document.getElementById('users-list').innerHTML = '<p>Error loading users</p>';
    }
  }
  
  // Display users list
  function displayUsers(users) {
    const container = document.getElementById('users-list');
    if (!container) return;
    
    // Clear content
    container.innerHTML = '';
    
    if (!users || users.length === 0) {
      container.innerHTML = '<p>No users found.</p>';
      return;
    }
    
    // Create table
    const table = document.createElement('table');
    
    // Table header
    const thead = document.createElement('thead');
    thead.innerHTML = `
      <tr>
        <th>ID</th>
        <th>Email</th>
        <th>Role</th>
        <th>Status</th>
        <th>Verification</th>
        <th>Actions</th>
      </tr>
    `;
    table.appendChild(thead);
    
    // Table body
    const tbody = document.createElement('tbody');
    
    users.forEach(user => {
      const tr = document.createElement('tr');
      
      const merchantInfo = user.merchantId ? 
        `<br><small>${user.merchantId.businessName} (${user.merchantId.country})</small>` :
        '';
      
      // Format status with color
      let statusHtml = user.status;
      if (user.status === 'active') {
        statusHtml = `<span style="color: green;">${user.status}</span>`;
      } else if (user.status === 'suspended') {
        statusHtml = `<span style="color: orange;">${user.status}</span>`;
      } else if (user.status === 'blocked') {
        statusHtml = `<span style="color: red;">${user.status}</span>`;
      }
      
      // Format verification status with color
      let verificationHtml = user.idCheckStatus || 'Not started';
      if (user.idCheckStatus === 'verified') {
        verificationHtml = `<span style="color: green;">${user.idCheckStatus}</span>`;
      } else if (user.idCheckStatus === 'pending') {
        verificationHtml = `<span style="color: orange;">${user.idCheckStatus}</span>`;
      } else if (user.idCheckStatus === 'rejected') {
        verificationHtml = `<span style="color: red;">${user.idCheckStatus}</span>`;
      }
      
      // Action buttons based on current status
      let actionButtons = `<button class="view-user-btn" data-id="${user._id}">View</button> `;
      
      if (user.status === 'active') {
        actionButtons += `
          <button class="suspend-user-btn" data-id="${user._id}">Suspend</button>
          <button class="block-user-btn" data-id="${user._id}">Block</button>
        `;
      } else if (user.status === 'suspended' || user.status === 'blocked') {
        actionButtons += `<button class="activate-user-btn" data-id="${user._id}">Activate</button>`;
      }
      
      tr.innerHTML = `
        <td>${user._id}</td>
        <td>${user.email}${merchantInfo}</td>
        <td>${user.role}</td>
        <td>${statusHtml}</td>
        <td>${verificationHtml}</td>
        <td>${actionButtons}</td>
      `;
      
      tbody.appendChild(tr);
    });
    
    table.appendChild(tbody);
    container.appendChild(table);
    
    // Add event listeners to action buttons
    attachUserButtonListeners();
  }
  
  // Attach event listeners to user action buttons
  function attachUserButtonListeners() {
    // View user buttons
    const viewButtons = document.querySelectorAll('.view-user-btn');
    viewButtons.forEach(button => {
      button.addEventListener('click', function() {
        const userId = this.getAttribute('data-id');
        window.location.href = `user-details.html?id=${userId}`;
      });
    });
    
    // Suspend user buttons
    const suspendButtons = document.querySelectorAll('.suspend-user-btn');
    suspendButtons.forEach(button => {
      button.addEventListener('click', function() {
        const userId = this.getAttribute('data-id');
        openSuspendUserModal(userId);
      });
    });
    
    // Block user buttons
    const blockButtons = document.querySelectorAll('.block-user-btn');
    blockButtons.forEach(button => {
      button.addEventListener('click', function() {
        const userId = this.getAttribute('data-id');
        confirmBlockUser(userId);
      });
    });
    
    // Activate user buttons
    const activateButtons = document.querySelectorAll('.activate-user-btn');
    activateButtons.forEach(button => {
      button.addEventListener('click', function() {
        const userId = this.getAttribute('data-id');
        activateUser(userId);
      });
    });
  }
  
  // Open suspend user modal
  function openSuspendUserModal(userId) {
    // Set user ID in hidden field
    document.getElementById('suspend-user-id').value = userId;
    
    // Show modal
    document.getElementById('suspend-user-modal').style.display = 'block';
  }
  
  // Suspend user
  async function suspendUser(userId, suspendUntil) {
    try {
      // Suspend user
      const result = await apiRequest(`/admin/users/${userId}/suspend`, 'POST', { suspendUntil }, false, true);
      
      if (result && result.success) {
        showAlert('User suspended successfully', 'success');
        
        // Close modal
        document.getElementById('suspend-user-modal').style.display = 'none';
        
        // Reload users
        loadUsers();
      } else {
        showAlert(result?.message || 'Failed to suspend user', 'error');
      }
    } catch (error) {
      console.error('Error suspending user:', error);
      showAlert('Error suspending user', 'error');
    }
  }
  
  // Confirm block user
  function confirmBlockUser(userId) {
    if (confirm('Are you sure you want to block this user? This action cannot be undone.')) {
      blockUser(userId);
    }
  }
  
  // Block user
  async function blockUser(userId) {
    try {
      // Block user
      const result = await apiRequest(`/admin/users/${userId}/block`, 'POST', {}, false, true);
      
      if (result && result.success) {
        showAlert('User blocked successfully', 'success');
        
        // Reload users
        loadUsers();
      } else {
        showAlert(result?.message || 'Failed to block user', 'error');
      }
    } catch (error) {
      console.error('Error blocking user:', error);
      showAlert('Error blocking user', 'error');
    }
  }
  
  // Activate user
  async function activateUser(userId) {
    try {
      // Activate user
      const result = await apiRequest(`/admin/users/${userId}/activate`, 'POST', {}, false, true);
      
      if (result && result.success) {
        showAlert('User activated successfully', 'success');
        
        // Reload users
        loadUsers();
      } else {
        showAlert(result?.message || 'Failed to activate user', 'error');
      }
    } catch (error) {
      console.error('Error activating user:', error);
      showAlert('Error activating user', 'error');
    }
  }
  
  // Load user details
  async function loadUserDetails(userId) {
    try {
      // Show loading
      showLoading('user-details');
      
      // Fetch user details
      const result = await apiRequest(`/admin/users/${userId}`, 'GET', null, false, true);
      
      if (result && result.success) {
        displayUserDetails(result.data);
      } else {
        document.getElementById('user-details').innerHTML = '<p>Failed to load user details</p>';
      }
    } catch (error) {
      console.error('Error loading user details:', error);
      document.getElementById('user-details').innerHTML = '<p>Error loading user details</p>';
    }
  }
  
  // Display user details
  function displayUserDetails(data) {
    const container = document.getElementById('user-details');
    if (!container) return;
    
    // Clear content
    container.innerHTML = '';
    
    const user = data.user;
    const verification = data.verification;
    
    // Create details content
    const details = document.createElement('div');
    
    // Basic info
    details.innerHTML = `
      <h3>User ID: ${user._id}</h3>
      <p>Email: ${user.email}</p>
      <p>Role: ${user.role}</p>
      <p>Status: ${user.status}</p>
      <p>Verification Status: ${user.idCheckStatus || 'Not started'}</p>
      <p>Email Verified: ${user.emailVerified ? 'Yes' : 'No'}</p>
      <p>Onboarding Stage: ${user.onboardingStage}</p>
      <p>Onboarding Complete: ${user.onboardingComplete ? 'Yes' : 'No'}</p>
    `;
    
    // Merchant info if exists
    if (user.merchantId) {
      details.innerHTML += `
        <h3>Merchant Details</h3>
        <p>Business Name: ${user.merchantId.businessName}</p>
        <p>Country: ${user.merchantId.country}</p>
        <p>Status: ${user.merchantId.status}</p>
        <p>Selling Method: ${user.merchantId.sellingMethod}</p>
      `;
    }
    
    // Verification info if exists
    if (verification) {
      details.innerHTML += `
        <h3>Verification</h3>
        <p>Status: ${verification.status}</p>
        <p>Submitted At: ${formatDate(verification.submittedAt)}</p>
        <p><a href="verification-details.html?id=${verification._id}">View Verification Details</a></p>
      `;
    }
    
    // Action buttons
    const actionsDiv = document.createElement('div');
    actionsDiv.style.marginTop = '20px';
    
    // Different actions based on current status
    if (user.status === 'active') {
      actionsDiv.innerHTML = `
        <button id="suspend-btn" class="button">Suspend User</button>
        <button id="block-btn" class="button">Block User</button>
      `;
    } else if (user.status === 'suspended' || user.status === 'blocked') {
      actionsDiv.innerHTML = `
        <button id="activate-btn" class="button">Activate User</button>
      `;
    }
    
    // Additional actions
    actionsDiv.innerHTML += `
      <button id="edit-btn" class="button">Edit User</button>
      <button id="delete-btn" class="button" style="background-color: #dc3545;">Delete User</button>
    `;
    
    // Add to container
    container.appendChild(details);
    container.appendChild(actionsDiv);
    
    // Add event listeners to action buttons
    const suspendBtn = document.getElementById('suspend-btn');
    if (suspendBtn) {
      suspendBtn.addEventListener('click', function() {
        openSuspendUserModal(user._id);
      });
    }
    
    const blockBtn = document.getElementById('block-btn');
    if (blockBtn) {
      blockBtn.addEventListener('click', function() {
        confirmBlockUser(user._id);
      });
    }
    
    const activateBtn = document.getElementById('activate-btn');
    if (activateBtn) {
      activateBtn.addEventListener('click', function() {
        activateUser(user._id);
      });
    }
    
    const editBtn = document.getElementById('edit-btn');
    if (editBtn) {
      editBtn.addEventListener('click', function() {
        openEditUserModal(user);
      });
    }
    
    const deleteBtn = document.getElementById('delete-btn');
    if (deleteBtn) {
      deleteBtn.addEventListener('click', function() {
        confirmDeleteUser(user._id);
      });
    }
  }
  
  // Open edit user modal
  function openEditUserModal(user) {
    // Populate form fields
    document.getElementById('edit-user-id').value = user._id;
    document.getElementById('edit-user-email').value = user.email;
    document.getElementById('edit-user-role').value = user.role;
    document.getElementById('edit-user-status').value = user.status;
    document.getElementById('edit-user-id-check-status').value = user.idCheckStatus || '';
    document.getElementById('edit-user-email-verified').value = user.emailVerified ? 'true' : 'false';
    
    if (user.merchantId) {
      document.getElementById('edit-user-business-name').value = user.merchantId.businessName;
      document.getElementById('edit-user-country').value = user.merchantId.country;
      document.getElementById('edit-user-selling-method').value = user.merchantId.sellingMethod;
    }
    
    // Show modal
    document.getElementById('edit-user-modal').style.display = 'block';
  }
  
  // Edit user
  async function editUser(event) {
    event.preventDefault();
    
    const userId = document.getElementById('edit-user-id').value;
    const email = document.getElementById('edit-user-email').value;
    const role = document.getElementById('edit-user-role').value;
    const status = document.getElementById('edit-user-status').value;
    const idCheckStatus = document.getElementById('edit-user-id-check-status').value;
    const emailVerified = document.getElementById('edit-user-email-verified').value;
    const businessName = document.getElementById('edit-user-business-name').value;
    const country = document.getElementById('edit-user-country').value;
    const sellingMethod = document.getElementById('edit-user-selling-method').value;
    
    try {
      const updateBtn = document.getElementById('update-user-btn');
      updateBtn.disabled = true;
      updateBtn.textContent = 'Updating...';
      
      // Update user fields one by one
      if (email) {
        await apiRequest(`/admin/users/${userId}/edit`, 'POST', { field: 'email', value: email }, false, true);
      }
      
      if (role) {
        await apiRequest(`/admin/users/${userId}/edit`, 'POST', { field: 'role', value: role }, false, true);
      }
      
      if (status) {
        await apiRequest(`/admin/users/${userId}/edit`, 'POST', { field: 'status', value: status }, false, true);
      }
      
      if (idCheckStatus) {
        await apiRequest(`/admin/users/${userId}/edit`, 'POST', { field: 'idCheckStatus', value: idCheckStatus }, false, true);
      }
      
      if (emailVerified) {
        await apiRequest(`/admin/users/${userId}/edit`, 'POST', { field: 'emailVerified', value: emailVerified }, false, true);
      }
      
      if (businessName) {
        await apiRequest(`/admin/users/${userId}/edit`, 'POST', { field: 'businessName', value: businessName }, false, true);
      }
      
      if (country) {
        await apiRequest(`/admin/users/${userId}/edit`, 'POST', { field: 'country', value: country }, false, true);
      }
      
      if (sellingMethod) {
        await apiRequest(`/admin/users/${userId}/edit`, 'POST', { field: 'sellingMethod', value: sellingMethod }, false, true);
      }
      
      showAlert('User updated successfully', 'success');
      
      // Close modal
      document.getElementById('edit-user-modal').style.display = 'none';
      
      // Reload user details
      loadUserDetails(userId);
      
      updateBtn.disabled = false;
      updateBtn.textContent = 'Update User';
    } catch (error) {
      console.error('Error updating user:', error);
      showAlert('Error updating user', 'error');
      
      const updateBtn = document.getElementById('update-user-btn');
      updateBtn.disabled = false;
      updateBtn.textContent = 'Update User';
    }
  }
  
  // Confirm delete user
  function confirmDeleteUser(userId) {
    if (confirm('Are you sure you want to delete this user? This action cannot be undone and will delete all associated data.')) {
      deleteUser(userId);
    }
  }
  
  // Delete user
  async function deleteUser(userId) {
    try {
      // Delete user
      const result = await apiRequest(`/admin/users/${userId}/delete`, 'POST', {}, false, true);
      
      if (result && result.success) {
        showAlert('User deleted successfully', 'success');
        
        // Redirect to users list
        window.location.href = 'users.html';
      } else {
        showAlert(result?.message || 'Failed to delete user', 'error');
      }
    } catch (error) {
      console.error('Error deleting user:', error);
      showAlert('Error deleting user', 'error');
    }
  }
  
  // Handle admin API requests
  async function apiRequest(endpoint, method = 'GET', data = null, includeAuth = true, isAdmin = false) {
    const url = `${API_URL}${endpoint}`;
    
    const headers = {
      'Content-Type': 'application/json'
    };
    
    // Add admin token if isAdmin is true
    if (isAdmin) {
      const adminToken = localStorage.getItem('admin_token');
      if (adminToken) {
        headers['X-Admin-Token'] = adminToken;
      } else {
        // Redirect to admin login if token doesn't exist
        window.location.href = '/admin-login.html';
        return null;
      }
    } 
    // Otherwise handle normal authentication
    else if (includeAuth) {
      const token = localStorage.getItem('jwt_token');
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      } else {
        window.location.href = '/login.html';
        return null;
      }
    }
    
    const options = {
      method,
      headers
    };
    
    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {
      options.body = JSON.stringify(data);
    }
    
    try {
      const response = await fetch(url, options);
      
      // Handle 401 Unauthorized (expired token)
      if (response.status === 401) {
        if (isAdmin) {
          localStorage.removeItem('admin_token');
          window.location.href = '/admin-login.html';
        } else {
          localStorage.removeItem('jwt_token');
          localStorage.removeItem('user_data');
          window.location.href = '/login.html';
        }
        return null;
      }
      
      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || 'API request failed');
      }
      
      return result;
    } catch (error) {
      console.error('API Request Error:', error);
      showAlert(error.message || 'Something went wrong', 'error');
      return null;
    }
  }
  
  // Initialize admin pages
  document.addEventListener('DOMContentLoaded', function() {
    // Check for admin token
    const adminToken = localStorage.getItem('admin_token');
    if (!adminToken && !window.location.pathname.includes('admin-login.html')) {
      window.location.href = '/admin-login.html';
      return;
    }
    
    // Init for admin dashboard
    if (window.location.pathname.includes('admin/index.html')) {
      createSidebar('Dashboard');
      loadAdminDashboard();
    }
    // Init for verifications page
    else if (window.location.pathname.includes('admin/verifications.html')) {
      createSidebar('Verifications');
      
      // Default to pending verifications
      loadPendingVerifications();
      
      // Add event listeners for tab buttons
      document.getElementById('pending-tab').addEventListener('click', function() {
        loadPendingVerifications();
      });
      
      document.getElementById('rejected-tab').addEventListener('click', function() {
        loadRejectedVerifications();
      });
    }
    // Init for verification details page
    else if (window.location.pathname.includes('admin/verification-details.html')) {
      createSidebar('Verifications');
      
      // Get verification ID from URL
      const params = getUrlParams();
      if (params.id) {
        loadVerificationDetails(params.id);
      } else {
        window.location.href = 'verifications.html';
      }
    }
    // Init for users page
    else if (window.location.pathname.includes('admin/users.html')) {
      createSidebar('Users');
      
      // Load users
      loadUsers();
      
      // Add event listener for search form
      const searchForm = document.getElementById('user-search-form');
      if (searchForm) {
        searchForm.addEventListener('submit', function(e) {
          e.preventDefault();
          
          const status = document.getElementById('filter-status').value;
          const search = document.getElementById('search-query').value;
          
          loadUsers({ status, search });
        });
      }
      
      // Add event listener for reset button
      const resetBtn = document.getElementById('reset-search-btn');
      if (resetBtn) {
        resetBtn.addEventListener('click', function() {
          document.getElementById('user-search-form').reset();
          loadUsers();
        });
      }
    }
    // Init for user details page
    else if (window.location.pathname.includes('admin/user-details.html')) {
      createSidebar('Users');
      
      // Get user ID from URL
      const params = getUrlParams();
      if (params.id) {
        loadUserDetails(params.id);
      } else {
        window.location.href = 'users.html';
      }
      
      // Add event listener for suspend form
      const suspendForm = document.getElementById('suspend-user-form');
      if (suspendForm) {
        suspendForm.addEventListener('submit', function(e) {
          e.preventDefault();
          
          const userId = document.getElementById('suspend-user-id').value;
          const suspendUntil = document.getElementById('suspend-until').value;
          
          if (!suspendUntil) {
            showAlert('Please select a suspension end date', 'error');
            return;
          }
          
          suspendUser(userId, suspendUntil);
        });
      }
      
      // Add event listener for close modal buttons
      const closeButtons = document.querySelectorAll('.close-modal');
      closeButtons.forEach(button => {
        button.addEventListener('click', function() {
          document.querySelectorAll('.modal').forEach(modal => {
            modal.style.display = 'none';
          });
        });
      });
      
      // Add event listener for edit user form
      const editUserForm = document.getElementById('edit-user-form');
      if (editUserForm) {
        editUserForm.addEventListener('submit', editUser);
      }
      
      // Close modal when clicking outside
      window.addEventListener('click', function(event) {
        document.querySelectorAll('.modal').forEach(modal => {
          if (event.target === modal) {
            modal.style.display = 'none';
          }
        });
      });
    }
  });

js/auth.js
// Handle login form submission
async function handleLogin(event) {
    event.preventDefault();
    
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    
    if (!email || !password) {
      showAlert('Please enter email and password', 'error');
      return;
    }
    
    try {
      const loginBtn = document.getElementById('login-btn');
      loginBtn.disabled = true;
      loginBtn.textContent = 'Logging in...';
      
      const result = await apiRequest('/auth/login', 'POST', { email, password }, false);
      
      if (result && result.success) {
        // Store token and user data
        localStorage.setItem('jwt_token', result.data.token);
        localStorage.setItem('user_data', JSON.stringify(result.data.user));
        
        // Redirect based on user role
        if (result.data.user.role === 'admin') {
          window.location.href = '/admin/index.html';
        } else {
          // Check for redirect parameter
          const params = getUrlParams();
          if (params.redirect) {
            window.location.href = params.redirect;
          } else {
            window.location.href = '/merchant/dashboard.html';
          }
        }
      } else {
        showAlert(result?.message || 'Login failed', 'error');
        loginBtn.disabled = false;
        loginBtn.textContent = 'Login';
      }
    } catch (error) {
      console.error('Login error:', error);
      showAlert('Login failed: ' + (error.message || 'Unknown error'), 'error');
      document.getElementById('login-btn').disabled = false;
      document.getElementById('login-btn').textContent = 'Login';
    }
  }
  
  // Handle registration form submission
  async function handleRegister(event) {
    event.preventDefault();
    
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    
    if (!email || !password) {
      showAlert('Please enter email and password', 'error');
      return;
    }
    
    if (password !== confirmPassword) {
      showAlert('Passwords do not match', 'error');
      return;
    }
    
    try {
      const registerBtn = document.getElementById('register-btn');
      registerBtn.disabled = true;
      registerBtn.textContent = 'Registering...';
      
      const result = await apiRequest('/auth/register', 'POST', { email, password }, false);
      
      if (result && result.success) {
        // Store token and user data
        localStorage.setItem('jwt_token', result.data.token);
        localStorage.setItem('user_data', JSON.stringify(result.data.user));
        
        // Redirect to onboarding or dashboard
        window.location.href = '/merchant/dashboard.html';
      } else {
        showAlert(result?.message || 'Registration failed', 'error');
        registerBtn.disabled = false;
        registerBtn.textContent = 'Register';
      }
    } catch (error) {
      console.error('Registration error:', error);
      showAlert('Registration failed: ' + (error.message || 'Unknown error'), 'error');
      document.getElementById('register-btn').disabled = false;
      document.getElementById('register-btn').textContent = 'Register';
    }
  }
  
  // Admin login handler
  async function handleAdminLogin(event) {
    event.preventDefault();
    
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    const accessKey = document.getElementById('access-key').value;
    
    if (!username || !password) {
      showAlert('Please enter username and password', 'error');
      return;
    }
    
    try {
      const loginBtn = document.getElementById('login-btn');
      loginBtn.disabled = true;
      loginBtn.textContent = 'Logging in...';
      
      const result = await apiRequest('/admin/login', 'POST', { 
        username, 
        password,
        accessKey
      }, false);
      
      if (result && result.success) {
        // Store admin token and access level
        localStorage.setItem('admin_token', result.data.adminToken);
        localStorage.setItem('admin_access', result.data.hasFullAccess);
        
        window.location.href = '/admin/index.html';
      } else {
        showAlert(result?.message || 'Admin login failed', 'error');
        loginBtn.disabled = false;
        loginBtn.textContent = 'Login';
      }
    } catch (error) {
      console.error('Admin login error:', error);
      showAlert('Login failed: ' + (error.message || 'Unknown error'), 'error');
      document.getElementById('login-btn').disabled = false;
      document.getElementById('login-btn').textContent = 'Login';
    }
  }
  
  // Fetch current user data
  async function fetchCurrentUser() {
    const result = await apiRequest('/auth/me', 'GET');
    
    if (result && result.success) {
      // Update stored user data
      localStorage.setItem('user_data', JSON.stringify(result.data.user));
      return result.data.user;
    } else {
      return null;
    }
  }
  
  // Check and initialize auth state
  function initAuth() {
    // Redirect based on auth state and current page
    const pathname = window.location.pathname;
    
    // For login and register pages, redirect to dashboard if already logged in
    if (pathname === '/login.html' || pathname === '/register.html' || pathname === '/' || pathname === '/index.html') {
      if (isLoggedIn()) {
        const user = getCurrentUser();
        if (user && user.role === 'admin') {
          window.location.href = '/admin/index.html';
        } else {
          window.location.href = '/merchant/dashboard.html';
        }
      }
    } 
    // For admin pages, check if admin
    else if (pathname.startsWith('/admin/')) {
      if (!localStorage.getItem('admin_token')) {
        window.location.href = '/admin-login.html';
      }
    }
    // For merchant pages, check if logged in as merchant
    else if (pathname.startsWith('/merchant/')) {
      if (!isLoggedIn()) {
        window.location.href = '/login.html?redirect=' + encodeURIComponent(pathname);
      } else {
        const user = getCurrentUser();
        if (user && user.role === 'admin') {
          window.location.href = '/admin/index.html';
        }
      }
    }
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize auth state
    initAuth();
    
    // Attach event listeners to forms
    const loginForm = document.getElementById('login-form');
    if (loginForm) {
      loginForm.addEventListener('submit', handleLogin);
    }
    
    const registerForm = document.getElementById('register-form');
    if (registerForm) {
      registerForm.addEventListener('submit', handleRegister);
    }
    
    const adminLoginForm = document.getElementById('admin-login-form');
    if (adminLoginForm) {
      adminLoginForm.addEventListener('submit', handleAdminLogin);
    }
  });

js/products.js
// js/products.js - FULLY UPDATED VERSION

// Toggle file method fields (URL or upload)
function toggleFileMethodFields() {
    const fileMethod = document.querySelector('input[name="file-method"]:checked')?.value;
    const fileUrlContainer = document.getElementById('file-url-container');
    const fileUploadContainer = document.getElementById('file-upload-container');
  
    // guard against missing elements
    if (!fileUrlContainer || !fileUploadContainer) return;
  
    if (fileMethod === 'url') {
        fileUrlContainer.style.display = 'block';
        fileUploadContainer.style.display = 'none';
        
        // Clear file upload when URL is selected
        const fileUploadInput = document.getElementById('product-file-upload');
        if (fileUploadInput) fileUploadInput.value = '';
    } else {
        fileUrlContainer.style.display = 'none';
        fileUploadContainer.style.display = 'block';
        
        // Clear URL input when file upload is selected
        const fileUrlInput = document.getElementById('product-file-url');
        if (fileUrlInput) fileUrlInput.value = '';
    }
}

// This function ensures consistent image URL formatting throughout the frontend
function formatImageUrl(imageUrl) {
    if (!imageUrl) return '';

    // If already a full URL with protocol, return as is
    if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
        return imageUrl;
    }

    // Extract the base URL from API_URL (e.g., http://localhost:5000)
    const baseUrl = API_URL.split('/api')[0];

    // Handle /api/uploads paths (preserve them as is)
    if (imageUrl.startsWith('/api/uploads/')) {
        return `${baseUrl}${imageUrl}`;
    }

    // Handle /uploads paths
    if (imageUrl.startsWith('/uploads/')) {
        return `${baseUrl}${imageUrl}`;
    }

    // If it's just a filename, assume it should be in /uploads
    if (!imageUrl.includes('/')) {
        return `${baseUrl}/uploads/${imageUrl}`;
    }

    // Default fallback - just prepend the base URL
    return `${baseUrl}${imageUrl.startsWith('/') ? '' : '/'}${imageUrl}`;
}

// Fetch and display products
async function loadProducts() {
    try {
        // Show loading
        showLoading('products-list');
    
        // Fetch products
        const result = await apiRequest('/products', 'GET');
    
        if (result && result.success) {
            displayProducts(result.data);
        } else {
            document.getElementById('products-list').innerHTML = '<p>Failed to load products</p>';
        }
    } catch (error) {
        console.error('Error loading products:', error);
        document.getElementById('products-list').innerHTML = '<p>Error loading products</p>';
    }
}

// Display products list
function displayProducts(data) {
    const container = document.getElementById('products-list');
    if (!container) return;

    // Clear content
    container.innerHTML = '';

    if (!data.products || data.products.length === 0) {
        container.innerHTML = '<p>No products found. Create your first product!</p>';
        return;
    }

    // Create table
    const table = document.createElement('table');

    // Table header
    const thead = document.createElement('thead');
    thead.innerHTML = `
      <tr>
        <th>Image</th>
        <th>Name</th>
        <th>Price</th>
        <th>Type</th>
        <th>Status</th>
        <th>Created</th>
        <th>Actions</th>
      </tr>
    `;
    table.appendChild(thead);

    // Table body
    const tbody = document.createElement('tbody');

    data.products.forEach(product => {
        const tr = document.createElement('tr');

        // Find main image or use first image
        let imageUrl = '';
        let imageAlt = product.title || 'Product image';

        if (product.images && product.images.length > 0) {
            const mainImage = product.images.find(img => img.isMain);
            const rawUrl = mainImage ? mainImage.url : product.images[0].url;
            imageUrl = formatImageUrl(rawUrl);

            // Log the raw and formatted URLs for debugging
            console.log('Raw image URL:', rawUrl, '| Formatted URL:', imageUrl);
        }

        tr.innerHTML = `
          <td>${imageUrl ? `<img src="${imageUrl}" alt="${imageAlt}" style="width: 50px; height: 50px; object-fit: cover;" onerror="this.src='../img/placeholder.png'; this.onerror=null;">` : 'No image'}</td>
          <td>${product.title}</td>
          <td>${formatCurrency(product.price, product.currency)}</td>
          <td>${product.type}</td>
          <td>${product.status}</td>
          <td>${formatDate(product.createdAt)}</td>
          <td>
            <button class="edit-btn" data-id="${product._id}">Edit</button>
            <button class="delete-btn" data-id="${product._id}">Delete</button>
          </td>
        `;

        tbody.appendChild(tr);
    });

    table.appendChild(tbody);
    container.appendChild(table);

    // Pagination if available
    if (data.pages > 1) {
        const pagination = document.createElement('div');
        pagination.className = 'pagination';
        pagination.style.marginTop = '20px';
        pagination.style.textAlign = 'center';

        // Previous button
        if (data.page > 1) {
            const prevBtn = document.createElement('button');
            prevBtn.textContent = 'Previous';
            prevBtn.addEventListener('click', () => {
                loadProductsPage(data.page - 1);
            });
            pagination.appendChild(prevBtn);
        }

        // Page number
        const pageInfo = document.createElement('span');
        pageInfo.textContent = ` Page ${data.page} of ${data.pages} `;
        pageInfo.style.margin = '0 10px';
        pagination.appendChild(pageInfo);

        // Next button
        if (data.page < data.pages) {
            const nextBtn = document.createElement('button');
            nextBtn.textContent = 'Next';
            nextBtn.addEventListener('click', () => {
                loadProductsPage(data.page + 1);
            });
            pagination.appendChild(nextBtn);
        }

        container.appendChild(pagination);
    }

    // Add event listeners for edit/delete buttons
    attachProductButtonListeners();
}

// Load products for a specific page
async function loadProductsPage(page = 1, limit = 10) {
    try {
        // Show loading
        showLoading('products-list');

        // Fetch products with pagination
        const result = await apiRequest(`/products?page=${page}&limit=${limit}`, 'GET');

        if (result && result.success) {
            displayProducts(result.data);
        } else {
            document.getElementById('products-list').innerHTML = '<p>Failed to load products</p>';
        }
    } catch (error) {
        console.error('Error loading products:', error);
        document.getElementById('products-list').innerHTML = '<p>Error loading products</p>';
    }
}

// Attach event listeners to product action buttons
function attachProductButtonListeners() {
    // Edit buttons
    const editButtons = document.querySelectorAll('.edit-btn');
    editButtons.forEach(button => {
        button.addEventListener('click', function () {
            const productId = this.getAttribute('data-id');
            openEditProductModal(productId);
        });
    });

    // Delete buttons
    const deleteButtons = document.querySelectorAll('.delete-btn');
    deleteButtons.forEach(button => {
        button.addEventListener('click', function () {
            const productId = this.getAttribute('data-id');
            confirmDeleteProduct(productId);
        });
    });
}

// Generate a random slug (10 characters, alphanumeric)
function generateSlug() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let slug = '';
    for (let i = 0; i < 10; i++) {
        slug += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return slug;
}

// Update image counter and enforce 10 image limit
function updateImageCounter(inputId, counterId) {
    const input = document.getElementById(inputId);
    const counter = document.getElementById(counterId) || 
                    document.querySelector(`#${inputId}`).nextElementSibling;
    
    if (input && counter) {
        const fileCount = input.files.length;
        
        if (fileCount > 10) {
            // Warn the user
            counter.textContent = `${fileCount}/10 images selected (only first 10 will be used)`;
            counter.style.color = 'red';
        } else {
            counter.textContent = `${fileCount}/10 images selected`;
            counter.style.color = fileCount > 8 ? 'orange' : '#666';
        }
    }
}

// Handle image preview for create form
function handleImagePreview() {
    const imageInput = document.getElementById('product-images');
    const previewContainer = document.getElementById('image-previews');

    if (!imageInput || !previewContainer) return;

    // Add listener for image counter
    imageInput.addEventListener('change', function() {
        updateImageCounter('product-images', 'image-counter');
    });

    imageInput.addEventListener('change', function () {
        // Clear existing previews
        previewContainer.innerHTML = '';

        // Limit to 10 images
        const maxImages = 10;
        const filesToPreview = Array.from(this.files).slice(0, maxImages);

        if (filesToPreview.length > 0) {
            for (let i = 0; i < filesToPreview.length; i++) {
                const file = filesToPreview[i];
                const reader = new FileReader();

                reader.onload = function (e) {
                    const preview = document.createElement('div');
                    preview.className = 'image-preview';
                    preview.innerHTML = `
                      <img src="${e.target.result}" alt="Preview" style="width: 100px; height: 100px; object-fit: cover;">
                      <div>
                        <label>
                          <input type="radio" name="main-image" value="${i}" ${i === 0 ? 'checked' : ''}>
                          Main Image
                        </label>
                        <button type="button" class="remove-image-btn" data-index="${i}">Remove</button>
                      </div>
                    `;
                    previewContainer.appendChild(preview);

                    // Add event listener for remove button
                    const removeButton = preview.querySelector('.remove-image-btn');
                    if (removeButton) {
                        removeButton.addEventListener('click', function() {
                            preview.remove();

                            // Re-index the remaining images
                            const previews = previewContainer.querySelectorAll('.image-preview');
                            previews.forEach((preview, newIndex) => {
                                const radio = preview.querySelector('input[type="radio"]');
                                const removeBtn = preview.querySelector('.remove-image-btn');

                                if (radio) radio.value = newIndex;
                                if (removeBtn) removeBtn.setAttribute('data-index', newIndex);
                            });

                            // If all images are removed, clear the file input
                            if (previews.length === 0) {
                                imageInput.value = '';
                                updateImageCounter('product-images', 'image-counter');
                            }
                        });
                    }
                };

                reader.readAsDataURL(file);
            }
        }
    });
}

// Handle image preview for edit form
function handleEditImagePreview() {
    const imageInput = document.getElementById('edit-product-new-images');
    const previewContainer = document.getElementById('edit-image-previews');
    const counter = document.getElementById('edit-image-counter');

    if (!imageInput || !previewContainer) return;

    // Add listener for image counter
    imageInput.addEventListener('change', function() {
        // Count existing images
        const existingImagesCount = previewContainer.querySelectorAll('.image-preview[data-type="existing"]').length;
        const newImagesCount = this.files.length;
        const totalImages = existingImagesCount + newImagesCount;
        
        if (totalImages > 10) {
            counter.textContent = `${totalImages}/10 images selected (exceeds limit)`;
            counter.style.color = 'red';
        } else {
            counter.textContent = `${totalImages}/10 images selected`;
            counter.style.color = totalImages > 8 ? 'orange' : '#666';
        }
    });

    imageInput.addEventListener('change', function () {
        // Calculate number of existing images
        const existingPreviews = previewContainer.querySelectorAll('.image-preview[data-type="existing"]');
        const existingCount = existingPreviews.length;
        
        // Calculate how many new images we can add (up to 10 total)
        const availableSlots = 10 - existingCount;
        
        if (availableSlots <= 0) {
            showAlert('Maximum 10 images allowed. Please remove some existing images first.', 'error');
            this.value = ''; // Clear the input
            return;
        }
        
        // Remove any existing "new" image previews
        const existingNewPreviews = previewContainer.querySelectorAll('.image-preview[data-type="new"]');
        existingNewPreviews.forEach(preview => preview.remove());

        if (this.files && this.files.length > 0) {
            // Limit new files to available slots
            const filesToPreview = Array.from(this.files).slice(0, availableSlots);
            
            for (let i = 0; i < filesToPreview.length; i++) {
                const file = filesToPreview[i];
                const reader = new FileReader();

                reader.onload = function (e) {
                    const preview = document.createElement('div');
                    preview.className = 'image-preview';
                    preview.dataset.type = 'new'; // Mark as a new image
                    preview.innerHTML = `
                      <img src="${e.target.result}" alt="Preview" style="width: 100px; height: 100px; object-fit: cover;">
                      <div>
                        <label>
                          <input type="radio" name="edit-main-image" value="new-${i}">
                          Main Image
                        </label>
                        <button type="button" class="remove-new-image-btn" data-index="${i}">Remove</button>
                      </div>
                    `;
                    previewContainer.appendChild(preview);

                    // Add event listener for remove button
                    const removeButton = preview.querySelector('.remove-new-image-btn');
                    if (removeButton) {
                        removeButton.addEventListener('click', function() {
                            // Create a new FileList without the removed file
                            preview.remove();
                            
                            // Update image counter
                            updateEditImageCounter();
                            
                            // If all new images are removed, clear the file input
                            const newPreviews = previewContainer.querySelectorAll('.image-preview[data-type="new"]');
                            if (newPreviews.length === 0) {
                                imageInput.value = '';
                            }
                        });
                    }
                };

                reader.readAsDataURL(file);
            }
            
            // If there are more files than slots, show warning
            if (this.files.length > availableSlots) {
                showAlert(`Only ${availableSlots} out of ${this.files.length} images will be used (10 images maximum).`, 'warning');
            }
        }
    });
    
    // Update the edit image counter based on existing previews
    function updateEditImageCounter() {
        const existingCount = previewContainer.querySelectorAll('.image-preview[data-type="existing"]').length;
        const newCount = previewContainer.querySelectorAll('.image-preview[data-type="new"]').length;
        const totalCount = existingCount + newCount;
        
        if (counter) {
            counter.textContent = `${totalCount}/10 images selected`;
            counter.style.color = totalCount > 8 ? 'orange' : '#666';
        }
    }
}

// Add a shipping method row
function addShippingMethodRow(containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;
    
    const row = document.createElement('div');
    row.className = 'shipping-method-row';
    row.innerHTML = `
        <input type="text" class="shipping-method-name" placeholder="Method name (e.g. Standard Shipping)" required>
        <input type="number" class="shipping-method-price" min="0" step="0.01" placeholder="Price" required>
        <button type="button" class="remove-shipping-method-btn">×</button>
    `;
    
    container.appendChild(row);
    
    // Add event listener for remove button
    const removeButton = row.querySelector('.remove-shipping-method-btn');
    if (removeButton) {
        removeButton.addEventListener('click', function() {
            row.remove();
        });
    }
}

// Create product form submission
async function handleCreateProduct(event) {
    event.preventDefault();

    // gather basic fields
    const title = document.getElementById('product-title').value;
    const shortDescription = document.getElementById('product-short-description').value;
    const longDescription = document.getElementById('product-long-description').value;
    const price = parseFloat(document.getElementById('product-price').value);
    const currency = document.getElementById('product-currency').value;
    const type = document.getElementById('product-type').value;
    const sku = document.getElementById('product-sku').value;
    const barcode = document.getElementById('product-barcode').value;
    const slug = generateSlug(); // Generate a random slug

    if (!title || !shortDescription || !longDescription || isNaN(price) || price <= 0 || !currency || !type) {
        showAlert('Please fill in all required fields with valid values', 'error');
        return;
    }

    const submitBtn = document.getElementById('create-product-btn');
    submitBtn.disabled = true;
    submitBtn.textContent = 'Creating…';

    try {
        const formData = new FormData();
        formData.append('title', title);
        formData.append('shortDescription', shortDescription);
        formData.append('longDescription', longDescription);
        formData.append('description', shortDescription); // For backwards compatibility
        formData.append('price', price);
        formData.append('currency', currency);
        formData.append('type', type);
        formData.append('slug', slug);
        
        // Add inventory fields if provided
        if (sku) formData.append('sku', sku);
        if (barcode) formData.append('barcode', barcode);

        // Handle images
        const imageFiles = document.getElementById('product-images').files;
        if (imageFiles && imageFiles.length > 0) {
            // Limit to 10 images
            const maxImages = 10;
            const limitedImageFiles = Array.from(imageFiles).slice(0, maxImages);
            
            for (let i = 0; i < limitedImageFiles.length; i++) {
                formData.append('images', limitedImageFiles[i]);
            }

            // Set main image
            const mainImageRadio = document.querySelector('input[name="main-image"]:checked');
            if (mainImageRadio) {
                formData.append('mainImageIndex', mainImageRadio.value);
            }
        } else {
            showAlert('Please add at least one product image', 'error');
            submitBtn.disabled = false;
            submitBtn.textContent = 'Create Product';
            return;
        }

        // DIGITAL-ONLY: handle file submission
        if (type === 'digital') {
            const fileMethod = document.querySelector('input[name="file-method"]:checked')?.value || 'url';
            formData.append('fileMethod', fileMethod);

            if (fileMethod === 'url') {
                const fileUrl = document.getElementById('product-file-url').value.trim();
                if (fileUrl) {
                    formData.append('fileUrl', fileUrl);
                }
            } else if (fileMethod === 'upload') {
                const fileInput = document.getElementById('product-file-upload');
                if (fileInput && fileInput.files && fileInput.files.length > 0) {
                    formData.append('digitalFile', fileInput.files[0]);
                }
            }

            // Handle recurring subscription - ONLY if checkbox is checked
            const isRecurring = document.getElementById('product-recurring').checked;
            formData.append('isRecurring', isRecurring ? 'true' : 'false');
            
            if (isRecurring) {
                const digitalData = {
                    recurring: {
                        interval: document.getElementById('product-interval').value,
                        hasTrial: document.getElementById('product-has-trial').checked,
                        trialDays: parseInt(document.getElementById('product-trial-days').value, 10) || 0
                    }
                };
                formData.append('digital', JSON.stringify(digitalData));
            }
        }

        // Handle physical product data
        if (type === 'physical') {
            // Handle stock
            const hasStock = document.getElementById('product-has-stock').checked;
            formData.append('hasStock', hasStock ? 'true' : 'false');

            if (hasStock) {
                const stock = document.getElementById('product-stock').value.trim();
                formData.append('stock', stock || '0');
            }

            // Handle variants
            const hasVariants = document.getElementById('product-has-variants').checked;
            formData.append('hasVariants', hasVariants ? 'true' : 'false');

            if (hasVariants) {
                const variantContainer = document.getElementById('variants-container');
                const variantRows = variantContainer.querySelectorAll('.variant-row');

                if (variantRows.length > 0) {
                    const variants = [];

                    variantRows.forEach(row => {
                        const nameInput = row.querySelector('.variant-name');
                        const valuesInput = row.querySelector('.variant-values');
                        const stockInput = row.querySelector('.variant-stock');

                        if (nameInput && valuesInput) {
                            variants.push({
                                name: nameInput.value.trim(),
                                values: valuesInput.value.split(',').map(v => v.trim()).filter(v => v),
                                stock: parseInt(stockInput?.value, 10) || 0
                            });
                        }
                    });

                    if (variants.length > 0) {
                        formData.append('variants', JSON.stringify(variants));
                    }
                }
            }
            
            // Handle shipping methods
            const shippingContainer = document.getElementById('shipping-methods-container');
            const shippingRows = shippingContainer.querySelectorAll('.shipping-method-row');
            
            if (shippingRows.length > 0) {
                const shippingMethods = [];
                
                shippingRows.forEach(row => {
                    const nameInput = row.querySelector('.shipping-method-name');
                    const priceInput = row.querySelector('.shipping-method-price');
                    
                    if (nameInput && nameInput.value.trim() && priceInput) {
                        shippingMethods.push({
                            name: nameInput.value.trim(),
                            price: parseFloat(priceInput.value) || 0
                        });
                    }
                });
                
                if (shippingMethods.length > 0) {
                    formData.append('shippingMethods', JSON.stringify(shippingMethods));
                }
            }
        }

        // Debug: Log the FormData entries
        console.log("FormData contents:");
        for (let pair of formData.entries()) {
            console.log(pair[0] + ': ' + pair[1]);
        }

        // Send the request with proper authorization
        const token = localStorage.getItem('jwt_token');
        const response = await fetch(`${API_URL}/products`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`
                // No Content-Type here - browser sets it with boundary for multipart/form-data
            },
            body: formData
        });

        const result = await response.json();
        if (result.success) {
            showAlert('Product created successfully', 'success');
            
            // Close modal
            document.getElementById('create-product-modal').style.display = 'none';
            
            // Reset form
            const form = document.getElementById('create-product-form');
            form.reset();
            
            // Explicitly reset checkboxes which may persist state
            document.getElementById('product-recurring').checked = false;
            document.getElementById('product-has-trial').checked = false;
            document.getElementById('product-has-stock').checked = true; // This one starts checked by default
            document.getElementById('product-has-variants').checked = false;
            
            // Reset visibility of conditional fields
            document.getElementById('recurring-options').style.display = 'none';
            document.getElementById('trial-options').style.display = 'none';
            document.getElementById('stock-field').style.display = 'block'; // This one starts visible by default
            document.getElementById('variants-section').style.display = 'none';
            
            // Clear preview containers
            document.getElementById('image-previews').innerHTML = '';
            document.querySelector('.image-counter').textContent = '0/10 images selected';
            
            loadProducts();
        } else {
            showAlert(result.message || 'Failed to create product', 'error');
        }
    } catch (err) {
        console.error('Error creating product:', err);
        showAlert('Error creating product: ' + (err.message || 'Unknown error'), 'error');
    } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'Create Product';
    }
}

// Open edit product modal
async function openEditProductModal(productId) {
    try {
        // Fetch product details
        const result = await apiRequest(`/products/${productId}`, 'GET');

        if (!result || !result.success) {
            showAlert(result?.message || 'Failed to load product details', 'error');
            return;
        }

        const product = result.data.product;
        console.log("Product data loaded:", product);

        // Get edit modal
        const editModal = document.getElementById('edit-product-modal');
        if (!editModal) {
            showAlert('Edit modal not found', 'error');
            return;
        }

        // Reset the form to clear any previous values
        const form = document.getElementById('edit-product-form');
        if (form) form.reset();

        // Reset the file input for new images
        const newImagesInput = document.getElementById('edit-product-new-images');
        if (newImagesInput) newImagesInput.value = '';
        
        // Remove any previous hidden field for removed images
        const existingRemovedImagesInput = document.getElementById('edit-removed-images');
        if (existingRemovedImagesInput) {
            existingRemovedImagesInput.parentNode.removeChild(existingRemovedImagesInput);
        }

        // Populate form fields with safe checks
        // Hidden fields
        const idField = document.getElementById('edit-product-id');
        if (idField) idField.value = product._id;

        // Basic fields - using value property instead of setAttribute for better compatibility 
        const titleField = document.getElementById('edit-product-title');
        if (titleField) titleField.value = product.title || '';

        // Short description
        const shortDescField = document.getElementById('edit-product-short-description');
        if (shortDescField) shortDescField.value = product.shortDescription || product.description || '';

        // Long description
        const longDescField = document.getElementById('edit-product-long-description');
        if (longDescField) longDescField.value = product.longDescription || product.description || '';

        // Regular description as fallback for both if they don't exist
        const descField = document.getElementById('edit-product-description');
        if (descField) descField.value = product.description || '';

        // Price field
        const priceField = document.getElementById('edit-product-price');
        if (priceField) priceField.value = product.price || '';

        // Currency
        const currencySelect = document.getElementById('edit-product-currency');
        if (currencySelect) {
            currencySelect.value = product.currency || 'USD';
        }

        // Type
        const typeSelect = document.getElementById('edit-product-type');
        if (typeSelect) {
            typeSelect.value = product.type || 'digital';
            // Trigger type change event to update visible fields
            const event = new Event('change');
            typeSelect.dispatchEvent(event);
        }

        // Status
        const statusSelect = document.getElementById('edit-product-status');
        if (statusSelect) {
            statusSelect.value = product.status || 'active';
        }
        
        // Inventory fields
        const skuField = document.getElementById('edit-product-sku');
        if (skuField) skuField.value = product.sku || '';
        
        const barcodeField = document.getElementById('edit-product-barcode');
        if (barcodeField) barcodeField.value = product.barcode || '';

        // Populate image previews
        const editImagePreviewsContainer = document.getElementById('edit-image-previews');
        if (editImagePreviewsContainer) {
            editImagePreviewsContainer.innerHTML = '';

            if (product.images && product.images.length > 0) {
                product.images.forEach((image, index) => {
                    const imageUrl = formatImageUrl(image.url);

                    const imagePreview = document.createElement('div');
                    imagePreview.className = 'image-preview';
                    imagePreview.dataset.type = 'existing'; // Mark as existing image
                    imagePreview.dataset.originalIndex = index; // Store original index
                    imagePreview.innerHTML = `
                      <img src="${imageUrl}" alt="Image ${index + 1}" style="width: 100px; height: 100px; object-fit: cover;" onerror="this.src='../img/placeholder.png'; this.onerror=null;">
                      <div>
                        <label>
                          <input type="radio" name="edit-main-image" value="${index}" ${image.isMain ? 'checked' : ''}>
                          Main Image
                        </label>
                        <button type="button" class="remove-image-btn" data-index="${index}">Remove</button>
                      </div>
                    `;
                    editImagePreviewsContainer.appendChild(imagePreview);
                });

                // Add event listeners for remove buttons
                const removeButtons = editImagePreviewsContainer.querySelectorAll('.remove-image-btn');
                removeButtons.forEach(button => {
                    button.addEventListener('click', function () {
                        const index = this.getAttribute('data-index');
                        // Remove from DOM
                        this.closest('.image-preview').remove();
                        
                        // Get or create the hidden field for tracking removed images
                        let removedImagesInput = document.getElementById('edit-removed-images');
                        
                        if (!removedImagesInput) {
                            removedImagesInput = document.createElement('input');
                            removedImagesInput.type = 'hidden';
                            removedImagesInput.id = 'edit-removed-images';
                            removedImagesInput.name = 'edit-removed-images';
                            form.appendChild(removedImagesInput);
                        }
                        
                        // Add the index to the list of removed images
                        const currentRemoved = removedImagesInput.value ? removedImagesInput.value.split(',') : [];
                        if (!currentRemoved.includes(index)) { // Avoid duplicates
                            currentRemoved.push(index);
                            removedImagesInput.value = currentRemoved.join(',');
                        }
                        
                        // Update image counter
                        updateEditImageCounter();
                        
                        console.log('Marked image for removal:', index, 'Current removed list:', removedImagesInput.value);
                    });
                });
                
                // Update image counter
                const imageCounter = document.getElementById('edit-image-counter');
                if (imageCounter) {
                    imageCounter.textContent = `${product.images.length}/10 images selected`;
                }
            }
        }

        // Set up type-specific fields
        // Digital or physical
        const digitalFields = document.getElementById('edit-digital-fields');
        const physicalFields = document.getElementById('edit-physical-fields');

        if (product.type === 'digital') {
            if (digitalFields) digitalFields.style.display = 'block';
            if (physicalFields) physicalFields.style.display = 'none';

            // Set digital fields if available
            if (product.digital) {
                // Set file method (URL or upload)
                if (product.digital.fileUrl) {
                    const urlRadio = document.getElementById('edit-file-method-url');
                    if (urlRadio) urlRadio.checked = true;

                    const urlInput = document.getElementById('edit-product-file-url');
                    if (urlInput) urlInput.value = product.digital.fileUrl;

                    const urlContainer = document.getElementById('edit-file-url-container');
                    const uploadContainer = document.getElementById('edit-file-upload-container');

                    if (urlContainer) urlContainer.style.display = 'block';
                    if (uploadContainer) uploadContainer.style.display = 'none';
                } else if (product.digital.fileUpload) {
                    const uploadRadio = document.getElementById('edit-file-method-upload');
                    if (uploadRadio) uploadRadio.checked = true;

                    const urlContainer = document.getElementById('edit-file-url-container');
                    const uploadContainer = document.getElementById('edit-file-upload-container');

                    if (urlContainer) urlContainer.style.display = 'none';
                    if (uploadContainer) uploadContainer.style.display = 'block';

                    // Show current filename
                    const fileNameDisplay = document.getElementById('edit-current-file-name');
                    if (fileNameDisplay) {
                        fileNameDisplay.textContent = `Current file: ${product.digital.fileUpload}`;
                        fileNameDisplay.style.display = 'block';
                    }
                }

                // Set recurring options
                if (product.digital.recurring) {
                    const recurringCheckbox = document.getElementById('edit-product-recurring');
                    if (recurringCheckbox) {
                        recurringCheckbox.checked = true;
                        
                        // Explicitly trigger the change event
                        const event = new Event('change');
                        recurringCheckbox.dispatchEvent(event);
                    }

                    const recurringOptions = document.getElementById('edit-recurring-options');
                    if (recurringOptions) recurringOptions.style.display = 'block';

                    const intervalSelect = document.getElementById('edit-product-interval');
                    if (intervalSelect && product.digital.recurring.interval) {
                        intervalSelect.value = product.digital.recurring.interval;
                    }

                    // Set trial options
                    if (product.digital.recurring.hasTrial) {
                        const trialCheckbox = document.getElementById('edit-product-has-trial');
                        if (trialCheckbox) {
                            trialCheckbox.checked = true;
                            
                            // Explicitly trigger the change event
                            const event = new Event('change');
                            trialCheckbox.dispatchEvent(event);
                        }

                        const trialOptions = document.getElementById('edit-trial-options');
                        if (trialOptions) trialOptions.style.display = 'block';

                        const trialDaysInput = document.getElementById('edit-product-trial-days');
                        if (trialDaysInput && product.digital.recurring.trialDays !== undefined) {
                            trialDaysInput.value = product.digital.recurring.trialDays;
                        }
                    } else {
                        // Ensure trial options are hidden if hasTrial is false
                        const trialOptions = document.getElementById('edit-trial-options');
                        if (trialOptions) trialOptions.style.display = 'none';

                        const trialCheckbox = document.getElementById('edit-product-has-trial');
                        if (trialCheckbox) trialCheckbox.checked = false;
                    }
                } else {
                    // Ensure recurring options are hidden if recurring doesn't exist
                    const recurringOptions = document.getElementById('edit-recurring-options');
                    if (recurringOptions) recurringOptions.style.display = 'none';

                    const recurringCheckbox = document.getElementById('edit-product-recurring');
                    if (recurringCheckbox) recurringCheckbox.checked = false;
                }
            }
        } else {
            // Physical product
            if (digitalFields) digitalFields.style.display = 'none';
            if (physicalFields) physicalFields.style.display = 'block';

            // Set physical fields if available
            if (product.physical) {
                // Set stock
                if (product.physical.stock !== undefined) {
                    const stockCheckbox = document.getElementById('edit-product-has-stock');
                    if (stockCheckbox) {
                        stockCheckbox.checked = true;
                        
                        // Explicitly trigger the change event
                        const event = new Event('change');
                        stockCheckbox.dispatchEvent(event);
                    }

                    const stockField = document.getElementById('edit-stock-field');
                    if (stockField) stockField.style.display = 'block';

                    const stockInput = document.getElementById('edit-product-stock');
                    if (stockInput) stockInput.value = product.physical.stock;
                } else {
                    const stockCheckbox = document.getElementById('edit-product-has-stock');
                    if (stockCheckbox) stockCheckbox.checked = false;

                    const stockField = document.getElementById('edit-stock-field');
                    if (stockField) stockField.style.display = 'none';
                }
                
                // Set shipping methods
                const shippingMethodsContainer = document.getElementById('edit-shipping-methods-container');
                if (shippingMethodsContainer) {
                    shippingMethodsContainer.innerHTML = '';
                    
                    if (product.physical.shippingMethods && product.physical.shippingMethods.length > 0) {
                        product.physical.shippingMethods.forEach(method => {
                            const row = document.createElement('div');
                            row.className = 'shipping-method-row';
                            row.innerHTML = `
                                <input type="text" class="shipping-method-name" value="${method.name}" placeholder="Method name" required>
                                <input type="number" class="shipping-method-price" min="0" step="0.01" value="${method.price}" placeholder="Price" required>
                                <button type="button" class="remove-shipping-method-btn">×</button>
                            `;
                            
                            shippingMethodsContainer.appendChild(row);
                            
                            // Add event listener for remove button
                            const removeButton = row.querySelector('.remove-shipping-method-btn');
                            if (removeButton) {
                                removeButton.addEventListener('click', function() {
                                    row.remove();
                                });
                            }
                        });
                    } else {
                        // Add at least one empty method row
                        addShippingMethodRow('edit-shipping-methods-container');
                    }
                }
            }

            // Set variants
            const variantsCheckbox = document.getElementById('edit-product-has-variants');
            const variantsSection = document.getElementById('edit-variants-section');
            const variantsContainer = document.getElementById('edit-variants-container');

            if (
                product.variants &&
                product.variants.length > 0 &&
                variantsCheckbox &&
                variantsSection &&
                variantsContainer
            ) {
                // Enable variants
                variantsCheckbox.checked = true;
                
                // Explicitly trigger the change event
                const event = new Event('change');
                variantsCheckbox.dispatchEvent(event);
                
                variantsSection.style.display = 'block';

                // Clear existing variants
                variantsContainer.innerHTML = '';

                // Add variant rows
                product.variants.forEach(variant => {
                    const variantRow = document.createElement('div');
                    variantRow.className = 'variant-row';
                    variantRow.innerHTML = `
                      <div class="form-group">
                        <label>Variant Name</label>
                        <input type="text" class="variant-name" value="${variant.name}" required>
                      </div>
                      <div class="form-group">
                        <label>Variant Values (comma-separated)</label>
                        <input type="text" class="variant-values" value="${variant.values.join(
                            ','
                        )}" required>
                      </div>
                      <div class="form-group">
                        <label>Stock</label>
                        <input type="number" class="variant-stock" value="${variant.stock || 0}" min="0">
                      </div>
                      <button type="button" class="remove-variant-btn">Remove</button>
                    `;

                    variantsContainer.appendChild(variantRow);
                });

                // Add event listeners for remove buttons
                const removeButtons = variantsContainer.querySelectorAll('.remove-variant-btn');
                removeButtons.forEach(button => {
                    button.addEventListener('click', function () {
                        this.closest('.variant-row').remove();
                    });
                });
            } else {
                // Ensure variants section is hidden if no variants
                if (variantsCheckbox) variantsCheckbox.checked = false;
                if (variantsSection) variantsSection.style.display = 'none';
            }
        }

        // Show modal
        editModal.style.display = 'block';
        
        // Update image counter for edit form
        function updateEditImageCounter() {
            const existingCount = editImagePreviewsContainer.querySelectorAll('.image-preview[data-type="existing"]').length;
            const newCount = editImagePreviewsContainer.querySelectorAll('.image-preview[data-type="new"]').length;
            const totalCount = existingCount + newCount;
            
            const counter = document.getElementById('edit-image-counter');
            if (counter) {
                counter.textContent = `${totalCount}/10 images selected`;
                counter.style.color = totalCount > 8 ? 'orange' : '#666';
            }
        }
        
        // Initialize the image counter
        updateEditImageCounter();
        
    } catch (error) {
        console.error('Error loading product details:', error);
        showAlert('Error loading product details: ' + (error.message || 'Unknown error'), 'error');
    }
}

// Update product form submission
async function handleUpdateProduct(event) {
    event.preventDefault();
    
    // Get form data
    const productId = document.getElementById('edit-product-id').value;
    const title = document.getElementById('edit-product-title').value;
    const shortDescription = document.getElementById('edit-product-short-description').value;
    const longDescription = document.getElementById('edit-product-long-description').value;
    const description = document.getElementById('edit-product-description').value; // For backwards compatibility
    const price = parseFloat(document.getElementById('edit-product-price').value);
    const currency = document.getElementById('edit-product-currency').value;
    const status = document.getElementById('edit-product-status').value;
    const type = document.getElementById('edit-product-type').value;
    const sku = document.getElementById('edit-product-sku').value;
    const barcode = document.getElementById('edit-product-barcode').value;

    if (!title || (!shortDescription && !description) || (!longDescription && !description) || isNaN(price) || price <= 0 || !currency || !status || !type) {
        showAlert('Please fill in all required fields with valid values', 'error');
        return;
    }

    try {
        const submitBtn = document.getElementById('update-product-btn');
        submitBtn.disabled = true;
        submitBtn.textContent = 'Updating...';

        // Create FormData for file uploads
        const formData = new FormData();
        formData.append('title', title);
        formData.append('shortDescription', shortDescription || description);
        formData.append('longDescription', longDescription || description);
        formData.append('description', description || shortDescription); // For backwards compatibility
        formData.append('price', price);
        formData.append('currency', currency);
        formData.append('status', status);
        formData.append('type', type);
        
        // Add inventory fields if provided
        if (sku) formData.append('sku', sku);
        if (barcode) formData.append('barcode', barcode);

        // Handle removed images
        const removedImagesInput = document.getElementById('edit-removed-images');
        if (removedImagesInput && removedImagesInput.value) {
            formData.append('removedImages', removedImagesInput.value);
        }

        // Handle main image selection
        const mainImageRadio = document.querySelector('input[name="edit-main-image"]:checked');
        if (mainImageRadio) {
            const mainImageValue = mainImageRadio.value;
            
            // Check if this is a new image or existing image
            if (mainImageValue.startsWith('new-')) {
                // New image selected as main, get the index from the value
                const newIndex = mainImageValue.split('-')[1];
                formData.append('mainImageIsNew', 'true');
                formData.append('mainImageNewIndex', newIndex);
            } else {
                // Existing image selected as main
                formData.append('mainImageIndex', mainImageValue);
            }
        }

        // Handle new image uploads - enforce limit of 10 total images
        const newImagesInput = document.getElementById('edit-product-new-images');
        if (newImagesInput && newImagesInput.files && newImagesInput.files.length > 0) {
            // Calculate existing images (not removed)
            const existingImages = document.querySelectorAll('#edit-image-previews .image-preview[data-type="existing"]').length;
            
            // Calculate how many new images we can add
            const maxNewImages = 10 - existingImages;
            
            if (maxNewImages > 0) {
                // Limit to available slots
                const filesToUpload = Array.from(newImagesInput.files).slice(0, maxNewImages);
                
                for (let i = 0; i < filesToUpload.length; i++) {
                    formData.append('newImages', filesToUpload[i]);
                }
            }
        }

        // Handle type-specific fields
        if (type === 'digital') {
            const fileMethod = document.querySelector('input[name="edit-file-method"]:checked')?.value;

            if (fileMethod) {
                formData.append('fileMethod', fileMethod);

                if (fileMethod === 'url') {
                    const fileUrl = document.getElementById('edit-product-file-url')?.value;
                    if (fileUrl) formData.append('fileUrl', fileUrl);
                } else if (fileMethod === 'upload') {
                    const fileInput = document.getElementById('edit-product-file-upload');
                    if (fileInput && fileInput.files && fileInput.files.length > 0) {
                        formData.append('digitalFile', fileInput.files[0]);
                    }
                }
            }

            // Handle recurring subscription - CHECK BOX STATE
            const isRecurring = document.getElementById('edit-product-recurring')?.checked;
            formData.append('isRecurring', isRecurring ? 'true' : 'false');

            if (isRecurring) {
                const digitalData = {
                    recurring: {
                        interval: document.getElementById('edit-product-interval')?.value || 'monthly',
                        hasTrial: document.getElementById('edit-product-has-trial')?.checked || false
                    }
                };

                if (digitalData.recurring.hasTrial) {
                    digitalData.recurring.trialDays =
                        parseInt(document.getElementById('edit-product-trial-days')?.value, 10) || 0;
                }

                formData.append('digital', JSON.stringify(digitalData));
            }
        } else if (type === 'physical') {
            // Handle stock
            const hasStock = document.getElementById('edit-product-has-stock')?.checked;
            formData.append('hasStock', hasStock ? 'true' : 'false');

            if (hasStock) {
                const stock = document.getElementById('edit-product-stock')?.value;
                formData.append('stock', stock || '0');
            }

            // Handle variants
            const hasVariants = document.getElementById('edit-product-has-variants')?.checked;
            formData.append('hasVariants', hasVariants ? 'true' : 'false');

            if (hasVariants) {
                const variantContainer = document.getElementById('edit-variants-container');
                const variantRows = variantContainer?.querySelectorAll('.variant-row');

                if (variantRows && variantRows.length > 0) {
                    const variants = [];

                    variantRows.forEach(row => {
                        const nameInput = row.querySelector('.variant-name');
                        const valuesInput = row.querySelector('.variant-values');
                        const stockInput = row.querySelector('.variant-stock');

                        if (nameInput && valuesInput) {
                            variants.push({
                                name: nameInput.value.trim(),
                                values: valuesInput.value.split(',').map(v => v.trim()).filter(v => v),
                                stock: parseInt(stockInput?.value, 10) || 0
                            });
                        }
                    });

                    if (variants.length > 0) {
                        formData.append('variants', JSON.stringify(variants));
                    }
                }
            }
            
            // Handle shipping methods
            const shippingContainer = document.getElementById('edit-shipping-methods-container');
            const shippingRows = shippingContainer?.querySelectorAll('.shipping-method-row');
            
            if (shippingRows && shippingRows.length > 0) {
                const shippingMethods = [];
                
                shippingRows.forEach(row => {
                    const nameInput = row.querySelector('.shipping-method-name');
                    const priceInput = row.querySelector('.shipping-method-price');
                    
                    if (nameInput && nameInput.value.trim() && priceInput) {
                        shippingMethods.push({
                            name: nameInput.value.trim(),
                            price: parseFloat(priceInput.value) || 0
                        });
                    }
                });
                
                if (shippingMethods.length > 0) {
                    formData.append('shippingMethods', JSON.stringify(shippingMethods));
                }
            }
        }

        // Debug log for form data
        console.log('FormData entries:');
        for (let pair of formData.entries()) {
            console.log(pair[0] + ': ' + (pair[1] instanceof File ? `File: ${pair[1].name}` : pair[1]));
        }

        // Send the update request
        const token = localStorage.getItem('jwt_token');
        const response = await fetch(`${API_URL}/products/${productId}`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`
                // Do not set Content-Type for FormData - browser will set it automatically
            },
            body: formData
        });

        const result = await response.json();

        if (result && result.success) {
            showAlert('Product updated successfully', 'success');

            // Close modal and reload products
            const modal = document.getElementById('edit-product-modal');
            if (modal) modal.style.display = 'none';
            
            // Remove the hidden field to prevent it from persisting
            const removedImagesInput = document.getElementById('edit-removed-images');
            if (removedImagesInput) {
                removedImagesInput.parentNode.removeChild(removedImagesInput);
            }

            loadProducts();
        } else {
            showAlert(result?.message || 'Failed to update product', 'error');
        }

        submitBtn.disabled = false;
        submitBtn.textContent = 'Update Product';
    } catch (error) {
        console.error('Error updating product:', error);
        showAlert('Error updating product: ' + (error.message || 'Unknown error'), 'error');

        const submitBtn = document.getElementById('update-product-btn');
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Update Product';
        }
    }
}

// Confirm delete product
function confirmDeleteProduct(productId) {
    if (confirm('Are you sure you want to delete this product?')) {
        deleteProduct(productId);
    }
}

// Delete product
async function deleteProduct(productId) {
    try {
        const result = await apiRequest(`/products/${productId}`, 'DELETE');

        if (result && result.success) {
            showAlert('Product deleted successfully', 'success');
            loadProducts();
        } else {
            showAlert(result?.message || 'Failed to delete product', 'error');
        }
    } catch (error) {
        console.error('Error deleting product:', error);
        showAlert('Error deleting product', 'error');
    }
}

// Show/hide form fields based on product type
function toggleProductTypeFields() {
    const productType = document.getElementById('product-type')?.value;
    const digitalFields = document.getElementById('digital-fields');
    const physicalFields = document.getElementById('physical-fields');

    if (!digitalFields || !physicalFields) return;

    if (productType === 'digital') {
        digitalFields.style.display = 'block';
        physicalFields.style.display = 'none';
        
        // Clear physical fields
        const stockInput = document.getElementById('product-stock');
        const hasStockCheckbox = document.getElementById('product-has-stock');
        const hasVariantsCheckbox = document.getElementById('product-has-variants');
        
        if (stockInput) stockInput.value = '0';
        if (hasStockCheckbox) hasStockCheckbox.checked = false;
        if (hasVariantsCheckbox) hasVariantsCheckbox.checked = false;
        
        const stockField = document.getElementById('stock-field');
        const variantsSection = document.getElementById('variants-section');
        
        if (stockField) stockField.style.display = 'none';
        if (variantsSection) variantsSection.style.display = 'none';
    } else {
        digitalFields.style.display = 'none';
        physicalFields.style.display = 'block';
        
        // Clear digital fields
        const fileUrlInput = document.getElementById('product-file-url');
        const fileUploadInput = document.getElementById('product-file-upload');
        const recurringCheckbox = document.getElementById('product-recurring');
        const hasTrialCheckbox = document.getElementById('product-has-trial');
        
        if (fileUrlInput) fileUrlInput.value = '';
        if (fileUploadInput) fileUploadInput.value = '';
        if (recurringCheckbox) recurringCheckbox.checked = false;
        if (hasTrialCheckbox) hasTrialCheckbox.checked = false;
        
        const recurringOptions = document.getElementById('recurring-options');
        const trialOptions = document.getElementById('trial-options');
        
        if (recurringOptions) recurringOptions.style.display = 'none';
        if (trialOptions) trialOptions.style.display = 'none';
    }
}

// Toggle edit file method fields (URL or upload)
function toggleEditFileMethodFields() {
    const fileMethod = document.querySelector('input[name="edit-file-method"]:checked')?.value;
    const fileUrlContainer = document.getElementById('edit-file-url-container');
    const fileUploadContainer = document.getElementById('edit-file-upload-container');

    if (!fileUrlContainer || !fileUploadContainer) return;

    if (fileMethod === 'url') {
        fileUrlContainer.style.display = 'block';
        fileUploadContainer.style.display = 'none';
        
        // Clear file upload when URL is selected
        const fileUploadInput = document.getElementById('edit-product-file-upload');
        if (fileUploadInput) fileUploadInput.value = '';
    } else {
        fileUrlContainer.style.display = 'none';
        fileUploadContainer.style.display = 'block';
        
        // Clear URL input when file upload is selected
        const fileUrlInput = document.getElementById('edit-product-file-url');
        if (fileUrlInput) fileUrlInput.value = '';
    }
}

// Toggle physical product stock fields
function toggleStockFields() {
    const hasStock = document.getElementById('product-has-stock')?.checked;
    const stockField = document.getElementById('stock-field');

    if (stockField) {
        stockField.style.display = hasStock ? 'block' : 'none';
    }
}

// Toggle edit physical product stock fields
function toggleEditStockFields() {
    const hasStock = document.getElementById('edit-product-has-stock')?.checked;
    const stockField = document.getElementById('edit-stock-field');

    if (stockField) {
        stockField.style.display = hasStock ? 'block' : 'none';
    }
}

// Toggle variant fields
function toggleVariantFields() {
    const hasVariants = document.getElementById('product-has-variants')?.checked;
    const variantsSection = document.getElementById('variants-section');

    if (variantsSection) {
        variantsSection.style.display = hasVariants ? 'block' : 'none';
    }
}

// Toggle edit variant fields
function toggleEditVariantFields() {
    const hasVariants = document.getElementById('edit-product-has-variants')?.checked;
    const variantsSection = document.getElementById('edit-variants-section');

    if (variantsSection) {
        variantsSection.style.display = hasVariants ? 'block' : 'none';
    }
}

// Add variant row
function addVariantRow(containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;

    const variantRow = document.createElement('div');
    variantRow.className = 'variant-row';
    variantRow.innerHTML = `
      <div class="form-group">
        <label>Variant Name</label>
        <input type="text" class="variant-name" placeholder="e.g. Size" required>
      </div>
      <div class="form-group">
        <label>Variant Values (comma-separated)</label>
        <input type="text" class="variant-values" placeholder="e.g. Small,Medium,Large" required>
      </div>
      <div class="form-group">
        <label>Stock</label>
        <input type="number" class="variant-stock" value="0" min="0">
      </div>
      <button type="button" class="remove-variant-btn">Remove</button>
    `;

    container.appendChild(variantRow);

    // Add event listener for remove button
    const removeBtn = variantRow.querySelector('.remove-variant-btn');
    if (removeBtn) {
        removeBtn.addEventListener('click', function () {
            variantRow.remove();
        });
    }
}

// Toggle recurring options visibility
function toggleRecurringOptions() {
    const isRecurring = document.getElementById('product-recurring')?.checked;
    const recurringOptions = document.getElementById('recurring-options');

    if (!recurringOptions) return;

    recurringOptions.style.display = isRecurring ? 'block' : 'none';

    // If recurring is disabled, also hide trial options
    if (!isRecurring) {
        const trialOptions = document.getElementById('trial-options');
        if (trialOptions) {
            trialOptions.style.display = 'none';
        }

        const hasTrial = document.getElementById('product-has-trial');
        if (hasTrial) {
            hasTrial.checked = false;
        }
    }
}

// Toggle trial options visibility
function toggleTrialOptions() {
    const hasTrial = document.getElementById('product-has-trial')?.checked;
    const trialOptions = document.getElementById('trial-options');

    if (!trialOptions) return;

    trialOptions.style.display = hasTrial ? 'block' : 'none';
}

// Toggle edit recurring options visibility
function toggleEditRecurringOptions() {
    const isRecurring = document.getElementById('edit-product-recurring')?.checked;
    const recurringOptions = document.getElementById('edit-recurring-options');

    if (!recurringOptions) return;

    recurringOptions.style.display = isRecurring ? 'block' : 'none';

    // If recurring is disabled, also hide trial options
    if (!isRecurring) {
        const trialOptions = document.getElementById('edit-trial-options');
        if (trialOptions) {
            trialOptions.style.display = 'none';
        }

        const hasTrial = document.getElementById('edit-product-has-trial');
        if (hasTrial) {
            hasTrial.checked = false;
        }
    }
}

// Toggle edit trial options visibility
function toggleEditTrialOptions() {
    const hasTrial = document.getElementById('edit-product-has-trial')?.checked;
    const trialOptions = document.getElementById('edit-trial-options');

    if (!trialOptions) return;

    trialOptions.style.display = hasTrial ? 'block' : 'none';
}

// Show/hide edit form fields based on product type
function toggleEditProductTypeFields() {
    const productType = document.getElementById('edit-product-type')?.value;
    const digitalFields = document.getElementById('edit-digital-fields');
    const physicalFields = document.getElementById('edit-physical-fields');

    if (!digitalFields || !physicalFields) return;

    if (productType === 'digital') {
        digitalFields.style.display = 'block';
        physicalFields.style.display = 'none';
        
        // Clear physical fields
        const stockInput = document.getElementById('edit-product-stock');
        const hasStockCheckbox = document.getElementById('edit-product-has-stock');
        const hasVariantsCheckbox = document.getElementById('edit-product-has-variants');
        
        if (stockInput) stockInput.value = '0';
        if (hasStockCheckbox) hasStockCheckbox.checked = false;
        if (hasVariantsCheckbox) hasVariantsCheckbox.checked = false;
        
        const stockField = document.getElementById('edit-stock-field');
        const variantsSection = document.getElementById('edit-variants-section');
        
        if (stockField) stockField.style.display = 'none';
        if (variantsSection) variantsSection.style.display = 'none';
    } else {
        digitalFields.style.display = 'none';
        physicalFields.style.display = 'block';
        
        // Clear digital fields
        const fileUrlInput = document.getElementById('edit-product-file-url');
        const fileUploadInput = document.getElementById('edit-product-file-upload');
        const recurringCheckbox = document.getElementById('edit-product-recurring');
        const hasTrialCheckbox = document.getElementById('edit-product-has-trial');
        
        if (fileUrlInput) fileUrlInput.value = '';
        if (fileUploadInput) fileUploadInput.value = '';
        if (recurringCheckbox) recurringCheckbox.checked = false;
        if (hasTrialCheckbox) hasTrialCheckbox.checked = false;
        
        const recurringOptions = document.getElementById('edit-recurring-options');
        const trialOptions = document.getElementById('edit-trial-options');
        
        if (recurringOptions) recurringOptions.style.display = 'none';
        if (trialOptions) trialOptions.style.display = 'none';
        
        // Reset current file name display if it exists
        const fileNameDisplay = document.getElementById('edit-current-file-name');
        if (fileNameDisplay) {
            fileNameDisplay.textContent = '';
            fileNameDisplay.style.display = 'none';
        }
    }
}

// Open create product modal
function openCreateProductModal() {
    const modal = document.getElementById('create-product-modal');
    if (modal) {
        // Reset form
        const form = document.getElementById('create-product-form');
        if (form) form.reset();

        // Clear image previews
        const previewContainer = document.getElementById('image-previews');
        if (previewContainer) previewContainer.innerHTML = '';
        
        // Reset image counter
        const imageCounter = document.querySelector('.image-counter');
        if (imageCounter) imageCounter.textContent = '0/10 images selected';
        
        // Explicitly reset all checkboxes (since form.reset() may not reset them reliably)
        const recurringCheckbox = document.getElementById('product-recurring');
        const trialCheckbox = document.getElementById('product-has-trial');
        const stockCheckbox = document.getElementById('product-has-stock');
        const variantsCheckbox = document.getElementById('product-has-variants');
        
        if (recurringCheckbox) recurringCheckbox.checked = false;
        if (trialCheckbox) trialCheckbox.checked = false;
        if (stockCheckbox) stockCheckbox.checked = true; // This one starts checked by default
        if (variantsCheckbox) variantsCheckbox.checked = false;

        // Initialize fields visibility
        toggleProductTypeFields();
        toggleFileMethodFields();
        toggleRecurringOptions();
        toggleTrialOptions();
        toggleStockFields();
        toggleVariantFields();
        
        // Reset shipping methods container
        const shippingContainer = document.getElementById('shipping-methods-container');
        if (shippingContainer) {
            shippingContainer.innerHTML = `
                <div class="shipping-method-row">
                    <input type="text" class="shipping-method-name" placeholder="Method name (e.g. Standard Shipping)" required>
                    <input type="number" class="shipping-method-price" min="0" step="0.01" placeholder="Price" required>
                    <button type="button" class="remove-shipping-method-btn">×</button>
                </div>
            `;
            
            // Add event listener for remove button
            const removeButton = shippingContainer.querySelector('.remove-shipping-method-btn');
            if (removeButton) {
                removeButton.addEventListener('click', function() {
                    this.closest('.shipping-method-row').remove();
                });
            }
        }

        // Show modal
        modal.style.display = 'block';
    }
}

// Close modals
function closeModals() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.style.display = 'none';
    });
}

// Function to update edit image counter
function updateEditImageCounter() {
    const container = document.getElementById('edit-image-previews');
    const counter = document.getElementById('edit-image-counter');
    
    if (container && counter) {
        const existingCount = container.querySelectorAll('.image-preview[data-type="existing"]').length;
        const newCount = container.querySelectorAll('.image-preview[data-type="new"]').length;
        const totalCount = existingCount + newCount;
        
        counter.textContent = `${totalCount}/10 images selected`;
        counter.style.color = totalCount > 8 ? 'orange' : '#666';
    }
}

// Initialize products page
document.addEventListener('DOMContentLoaded', function () {
    // Create sidebar with active menu
    createSidebar('Products');

    // Load products
    loadProducts();

    // Set up image preview handler
    handleImagePreview();
    
    // Set up edit image preview handler
    handleEditImagePreview();

    // Add event listener for create product button
    const createBtn = document.getElementById('create-product-btn-main');
    if (createBtn) {
        createBtn.addEventListener('click', openCreateProductModal);
    }

    // Add event listener for product type select in create form
    const productTypeSelect = document.getElementById('product-type');
    if (productTypeSelect) {
        productTypeSelect.addEventListener('change', toggleProductTypeFields);
    }

    // Add event listeners for file method radios
    const fileMethodRadios = document.querySelectorAll('input[name="file-method"]');
    fileMethodRadios.forEach(radio => {
        radio.addEventListener('change', toggleFileMethodFields);
    });

    // Add event listener for recurring checkbox
    const recurringCheckbox = document.getElementById('product-recurring');
    if (recurringCheckbox) {
        recurringCheckbox.addEventListener('change', toggleRecurringOptions);
    }

    // Add event listener for trial checkbox
    const trialCheckbox = document.getElementById('product-has-trial');
    if (trialCheckbox) {
        trialCheckbox.addEventListener('change', toggleTrialOptions);
    }

    // Add event listener for stock checkbox
    const stockCheckbox = document.getElementById('product-has-stock');
    if (stockCheckbox) {
        stockCheckbox.addEventListener('change', toggleStockFields);
    }

 // Add event listener for variants checkbox
 const variantsCheckbox = document.getElementById('product-has-variants');
 if (variantsCheckbox) {
     variantsCheckbox.addEventListener('change', toggleVariantFields);
 }

 // Add event listener for add variant button
 const addVariantBtn = document.getElementById('add-variant-btn');
 if (addVariantBtn) {
     addVariantBtn.addEventListener('click', function () {
         addVariantRow('variants-container');
     });
 }
 
 // Add event listener for add shipping method button (create form)
 const addShippingMethodBtn = document.getElementById('add-shipping-method-btn');
 if (addShippingMethodBtn) {
     addShippingMethodBtn.addEventListener('click', function() {
         addShippingMethodRow('shipping-methods-container');
     });
 }
 
 // Add event listeners for initial shipping method remove buttons
 const initialShippingMethodRemoveBtns = document.querySelectorAll('#shipping-methods-container .remove-shipping-method-btn');
 initialShippingMethodRemoveBtns.forEach(btn => {
     btn.addEventListener('click', function() {
         this.closest('.shipping-method-row').remove();
     });
 });

 // Add event listener for edit product type select
 const editProductTypeSelect = document.getElementById('edit-product-type');
 if (editProductTypeSelect) {
     editProductTypeSelect.addEventListener('change', toggleEditProductTypeFields);
 }

 // Add event listeners for edit file method radios
 const editFileMethodRadios = document.querySelectorAll('input[name="edit-file-method"]');
 editFileMethodRadios.forEach(radio => {
     radio.addEventListener('change', toggleEditFileMethodFields);
 });

 // Add event listener for edit recurring checkbox
 const editRecurringCheckbox = document.getElementById('edit-product-recurring');
 if (editRecurringCheckbox) {
     editRecurringCheckbox.addEventListener('change', toggleEditRecurringOptions);
 }   

 // Add event listener for edit trial checkbox
 const editTrialCheckbox = document.getElementById('edit-product-has-trial');
 if (editTrialCheckbox) {
     editTrialCheckbox.addEventListener('change', toggleEditTrialOptions);
 }

 // Add event listener for edit stock checkbox
 const editStockCheckbox = document.getElementById('edit-product-has-stock');
 if (editStockCheckbox) {
     editStockCheckbox.addEventListener('change', toggleEditStockFields);
 }

 // Add event listener for edit variants checkbox
 const editVariantsCheckbox = document.getElementById('edit-product-has-variants');
 if (editVariantsCheckbox) {
     editVariantsCheckbox.addEventListener('change', toggleEditVariantFields);
 }

 // Add event listener for edit add variant button
 const editAddVariantBtn = document.getElementById('edit-add-variant-btn');
 if (editAddVariantBtn) {
     editAddVariantBtn.addEventListener('click', function () {
         addVariantRow('edit-variants-container');
     });
 }
 
 // Add event listener for edit add shipping method button
 const editAddShippingMethodBtn = document.getElementById('edit-add-shipping-method-btn');
 if (editAddShippingMethodBtn) {
     editAddShippingMethodBtn.addEventListener('click', function() {
         addShippingMethodRow('edit-shipping-methods-container');
     });
 }

 // Add event listener for create product form
 const createProductForm = document.getElementById('create-product-form');
 if (createProductForm) {
     createProductForm.addEventListener('submit', handleCreateProduct);
 }

 // Add event listener for update product form
 const updateProductForm = document.getElementById('edit-product-form');
 if (updateProductForm) {
     updateProductForm.addEventListener('submit', handleUpdateProduct);
 }

 // Add event listeners for modal close buttons
 const closeButtons = document.querySelectorAll('.close-modal');
 closeButtons.forEach(button => {
     button.addEventListener('click', closeModals);
 });

 // Close modal when clicking outside
 window.addEventListener('click', function (event) {
     const modals = document.querySelectorAll('.modal');
     modals.forEach(modal => {
         if (event.target === modal) {
             modal.style.display = 'none';
         }
     });
 });
});

js/transactions.js
// Load transactions data
async function loadTransactions(page = 1, limit = 10, filters = {}) {
    // Make sure user is logged in
    if (!isLoggedIn()) {
      window.location.href = '/login.html';
      return;
    }
    
    try {
      // Show loading
      showLoading('transactions-list');
      
      // Build query parameters
      let queryParams = `?page=${page}&limit=${limit}`;
      
      // Add filters if provided
      if (filters.status) {
        queryParams += `&status=${filters.status}`;
      }
      
      if (filters.fromDate) {
        queryParams += `&fromDate=${filters.fromDate}`;
      }
      
      if (filters.toDate) {
        queryParams += `&toDate=${filters.toDate}`;
      }
      
      // Fetch transactions
      const result = await apiRequest(`/finance/transactions${queryParams}`, 'GET');
      
      if (result && result.success) {
        displayTransactions(result.data);
      } else {
        document.getElementById('transactions-list').innerHTML = '<p>Failed to load transactions</p>';
      }
    } catch (error) {
      console.error('Error loading transactions:', error);
      document.getElementById('transactions-list').innerHTML = '<p>Error loading transactions</p>';
    }
  }
  
  // Display transactions list
  function displayTransactions(data) {
    const container = document.getElementById('transactions-list');
    if (!container) return;
    
    // Clear loading
    container.innerHTML = '';
    
    if (!data.transactions || data.transactions.length === 0) {
      container.innerHTML = '<p>No transactions found.</p>';
      return;
    }
    
    // Create table
    const table = document.createElement('table');
    
    // Table header
    const thead = document.createElement('thead');
    thead.innerHTML = `
      <tr>
        <th>Date</th>
        <th>ID</th>
        <th>Customer</th>
        <th>Method</th>
        <th>Status</th>
        <th>Amount</th>
        <th>Actions</th>
      </tr>
    `;
    table.appendChild(thead);
    
    // Table body
    const tbody = document.createElement('tbody');
    
    data.transactions.forEach(transaction => {
      const tr = document.createElement('tr');
      
      // Format status with color
      let statusHtml = transaction.status;
      if (transaction.status === 'succeeded' || transaction.status === 'captured') {
        statusHtml = `<span style="color: green;">${transaction.status}</span>`;
      } else if (transaction.status === 'failed') {
        statusHtml = `<span style="color: red;">${transaction.status}</span>`;
      } else if (transaction.status === 'pending') {
        statusHtml = `<span style="color: orange;">${transaction.status}</span>`;
      } else if (transaction.status === 'refunded') {
        statusHtml = `<span style="color: blue;">${transaction.status}</span>`;
      } else if (transaction.status === 'chargeback') {
        statusHtml = `<span style="color: darkred;">${transaction.status}</span>`;
      }
      
      tr.innerHTML = `
        <td>${formatDate(transaction.createdAt)}</td>
        <td>${transaction.id}</td>
        <td>${transaction.customer || 'N/A'}</td>
        <td>${transaction.paymentMethod || 'N/A'}</td>
        <td>${statusHtml}</td>
        <td>${formatCurrency(transaction.amount, transaction.currency)}</td>
        <td>
          <button class="view-btn" data-id="${transaction.id}">View</button>
          ${transaction.status === 'captured' ? `<button class="refund-btn" data-id="${transaction.id}">Refund</button>` : ''}
        </td>
      `;
      
      tbody.appendChild(tr);
    });
    
    table.appendChild(tbody);
    container.appendChild(table);
    
    // Pagination if available
    if (data.pages > 1) {
      const pagination = document.createElement('div');
      pagination.className = 'pagination';
      pagination.style.marginTop = '20px';
      pagination.style.textAlign = 'center';
      
      // Previous button
      if (data.page > 1) {
        const prevBtn = document.createElement('button');
        prevBtn.textContent = 'Previous';
        prevBtn.addEventListener('click', () => {
          const filters = getFilterValues();
          loadTransactions(data.page - 1, data.limit, filters);
        });
        pagination.appendChild(prevBtn);
      }
      
      // Page number
      const pageInfo = document.createElement('span');
      pageInfo.textContent = ` Page ${data.page} of ${data.pages} `;
      pageInfo.style.margin = '0 10px';
      pagination.appendChild(pageInfo);
      
      // Next button
      if (data.page < data.pages) {
        const nextBtn = document.createElement('button');
        nextBtn.textContent = 'Next';
        nextBtn.addEventListener('click', () => {
          const filters = getFilterValues();
          loadTransactions(data.page + 1, data.limit, filters);
        });
        pagination.appendChild(nextBtn);
      }
      
      container.appendChild(pagination);
    }
    
    // Add event listeners for view/refund buttons
    attachTransactionButtonListeners();
  }
  
  // Attach event listeners to transaction action buttons
  function attachTransactionButtonListeners() {
    // View buttons
    const viewButtons = document.querySelectorAll('.view-btn');
    viewButtons.forEach(button => {
      button.addEventListener('click', function() {
        const transactionId = this.getAttribute('data-id');
        viewTransactionDetails(transactionId);
      });
    });
    
    // Refund buttons
    const refundButtons = document.querySelectorAll('.refund-btn');
    refundButtons.forEach(button => {
      button.addEventListener('click', function() {
        const transactionId = this.getAttribute('data-id');
        confirmRefundTransaction(transactionId);
      });
    });
  }
  
  // View transaction details
  function viewTransactionDetails(transactionId) {
    alert(`View transaction details for ID: ${transactionId}`);
    // In a real implementation, this would fetch the transaction details and show them in a modal
  }
  
  // Confirm refund transaction
  function confirmRefundTransaction(transactionId) {
    if (confirm('Are you sure you want to refund this transaction?')) {
      refundTransaction(transactionId);
    }
  }
  
  // Refund transaction
  async function refundTransaction(transactionId) {
    try {
      // Process refund
      const result = await apiRequest(`/orders/${transactionId}/refund`, 'POST');
      
      if (result && result.success) {
        showAlert('Transaction refunded successfully', 'success');
        
        // Reload transactions
        loadTransactions();
      } else {
        showAlert(result?.message || 'Failed to refund transaction', 'error');
      }
    } catch (error) {
      console.error('Error refunding transaction:', error);
      showAlert('Error refunding transaction', 'error');
    }
  }
  
  // Get filter values
  function getFilterValues() {
    const status = document.getElementById('filter-status')?.value;
    const fromDate = document.getElementById('filter-from-date')?.value;
    const toDate = document.getElementById('filter-to-date')?.value;
    
    const filters = {};
    
    if (status && status !== 'all') {
      filters.status = status;
    }
    
    if (fromDate) {
      filters.fromDate = fromDate;
    }
    
    if (toDate) {
      filters.toDate = toDate;
    }
    
    return filters;
  }
  
  // Handle filter form submission
  function handleFilterSubmit(event) {
    event.preventDefault();
    
    const filters = getFilterValues();
    loadTransactions(1, 10, filters);
  }
  
  // Reset filters
  function resetFilters() {
    // Reset filter form
    document.getElementById('filter-form').reset();
    
    // Reload transactions with default filters
    loadTransactions();
  }
  
  // Initialize transactions page
  document.addEventListener('DOMContentLoaded', function() {
    // Create sidebar with active menu
    createSidebar('Transactions');
    
    // Load transactions
    loadTransactions();
    
    // Add event listener for filter form
    const filterForm = document.getElementById('filter-form');
    if (filterForm) {
      filterForm.addEventListener('submit', handleFilterSubmit);
    }
    
    // Add event listener for reset filters button
    const resetFiltersBtn = document.getElementById('reset-filters-btn');
    if (resetFiltersBtn) {
      resetFiltersBtn.addEventListener('click', resetFilters);
    }
  });

js/utils.js
// Base API URL
const API_URL = 'http://localhost:5000/api';

// Helper function to make API requests
async function apiRequest(endpoint, method = 'GET', data = null, includeAuth = true) {
  const url = `${API_URL}${endpoint}`;
  
  const headers = {
    'Content-Type': 'application/json'
  };
  
  // Add Authorization header if needed and token exists
  if (includeAuth) {
    const token = localStorage.getItem('jwt_token');
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    } else {
      // Redirect to login if token doesn't exist for authenticated requests
      window.location.href = '/login.html?redirect=' + encodeURIComponent(window.location.pathname);
      return null;
    }
  }
  
  const options = {
    method,
    headers
  };
  
  if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {
    options.body = JSON.stringify(data);
  }
  
  try {
    const response = await fetch(url, options);
    
    // Handle 401 Unauthorized (expired token)
    if (response.status === 401 && includeAuth) {
      localStorage.removeItem('jwt_token');
      localStorage.removeItem('user_data');
      window.location.href = '/login.html?redirect=' + encodeURIComponent(window.location.pathname);
      return null;
    }
    
    const result = await response.json();
    
    if (!response.ok) {
      throw new Error(result.message || 'API request failed');
    }
    
    return result;
  } catch (error) {
    console.error('API Request Error:', error);
    showAlert(error.message || 'Something went wrong', 'error');
    return null;
  }
}

// Show alert message
function showAlert(message, type = 'success', duration = 5000) {
  // Remove any existing alerts
  const existingAlert = document.querySelector('.alert');
  if (existingAlert) {
    existingAlert.remove();
  }
  
  // Create alert element
  const alert = document.createElement('div');
  alert.className = `alert alert-${type}`;
  alert.textContent = message;
  
  // Append to body or to a specific alert container if it exists
  const alertContainer = document.getElementById('alert-container') || document.body;
  alertContainer.prepend(alert);
  
  // Auto remove after duration
  setTimeout(() => {
    alert.remove();
  }, duration);
}

// Format currency
function formatCurrency(amount, currency = 'USD') {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency
  }).format(amount);
}

// Format date
function formatDate(dateString, includeTime = true) {
  const date = new Date(dateString);
  const dateOptions = { year: 'numeric', month: '2-digit', day: '2-digit' };
  
  if (includeTime) {
    return date.toLocaleString('en-US', {
      ...dateOptions,
      hour: '2-digit', 
      minute: '2-digit'
    });
  }
  
  return date.toLocaleDateString('en-US', dateOptions);
}

// Check if user is logged in
function isLoggedIn() {
  return localStorage.getItem('jwt_token') !== null;
}

// Get current user data
function getCurrentUser() {
  const userData = localStorage.getItem('user_data');
  return userData ? JSON.parse(userData) : null;
}

// Check if user is admin
function isAdmin() {
  const user = getCurrentUser();
  return user && user.role === 'admin';
}

// Protection for merchant-only pages
function requireMerchant() {
  const user = getCurrentUser();
  if (!user || user.role !== 'merchant') {
    window.location.href = '/login.html';
    return false;
  }
  return true;
}

// Protection for admin-only pages
function requireAdmin() {
  const user = getCurrentUser();
  if (!user || user.role !== 'admin') {
    window.location.href = '/login.html';
    return false;
  }
  return true;
}

// Get URL parameters
function getUrlParams() {
  const params = {};
  new URLSearchParams(window.location.search).forEach((value, key) => {
    params[key] = value;
  });
  return params;
}

// Show loading spinner
function showLoading(containerId) {
  const container = document.getElementById(containerId);
  if (container) {
    container.innerHTML = '<div class="spinner"></div>';
  }
}

// Create sidebar navigation
function createSidebar(active) {
  const user = getCurrentUser();
  if (!user) return;
  
  const sidebar = document.createElement('div');
  sidebar.className = 'sidebar';
  
  // Logo
  const logo = document.createElement('div');
  logo.className = 'logo';
  logo.textContent = 'RiskPay';
  sidebar.appendChild(logo);
  
  // Navigation links
  const nav = document.createElement('nav');
  const ul = document.createElement('ul');
  ul.style.listStyle = 'none';
  ul.style.padding = '20px 0';
  
  const links = user.role === 'admin' ? [
    { href: '/admin/index.html', text: 'Dashboard' },
    { href: '/admin/verifications.html', text: 'Verifications' },
    { href: '/admin/users.html', text: 'Users' }
  ] : [
    { href: '/merchant/dashboard.html', text: 'Dashboard' },
    { href: '/merchant/products.html', text: 'Products' },
    { href: '/merchant/transactions.html', text: 'Transactions' },
    { href: '/merchant/finance.html', text: 'Finance' }
  ];
  
  links.forEach(link => {
    const li = document.createElement('li');
    li.style.margin = '10px 0';
    
    const a = document.createElement('a');
    a.href = link.href;
    a.textContent = link.text;
    
    if (link.text.toLowerCase() === active.toLowerCase()) {
      a.style.fontWeight = 'bold';
    }
    
    li.appendChild(a);
    ul.appendChild(li);
  });
  
  // Logout link
  const logoutLi = document.createElement('li');
  logoutLi.style.margin = '10px 0';
  
  const logoutBtn = document.createElement('a');
  logoutBtn.href = '#';
  logoutBtn.textContent = 'Log Out';
  logoutBtn.addEventListener('click', (e) => {
    e.preventDefault();
    localStorage.removeItem('jwt_token');
    localStorage.removeItem('user_data');
    window.location.href = '/login.html';
  });
  
  logoutLi.appendChild(logoutBtn);
  ul.appendChild(logoutLi);
  
  nav.appendChild(ul);
  sidebar.appendChild(nav);
  
  document.body.prepend(sidebar);
  
  // Adjust main content margin
  const mainContent = document.querySelector('.container');
  if (mainContent) {
    mainContent.className = 'container main-content';
  }
}

login.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login - RiskPay</title>
  <link rel="stylesheet" href="css/main.css">
</head>
<body>
  <div class="container">
    <header>
      <h1>RiskPay</h1>
      <nav>
        <ul>
          <li><a href="register.html">Register</a></li>
        </ul>
      </nav>
    </header>
    
    <div id="alert-container"></div>
    
    <div class="card" style="max-width: 500px; margin: 0 auto;">
      <h2>Login</h2>
      <form id="login-form">
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" required>
        </div>
        
        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" required>
        </div>
        
        <button type="submit" id="login-btn">Login</button>
      </form>
      
      <p style="margin-top: 20px;">
        Don't have an account? <a href="register.html">Register here</a>
      </p>
      
      <p>
        <a href="admin-login.html">Admin Login</a>
      </p>
    </div>
  </div>
  
  <script src="js/utils.js"></script>
  <script src="js/auth.js"></script>
</body>
</html>

merchant/dashboard.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Merchant Dashboard - RiskPay</title>
  <link rel="stylesheet" href="../css/main.css">
</head>
<body>
  <div class="container">
    <div id="alert-container"></div>
    
    <header>
      <h1 id="welcome-message">Welcome to RiskPay</h1>
      <div>
        <span id="current-date"></span>
      </div>
    </header>
    
    <section id="dashboard-data">
      <!-- Balance data will be loaded here -->
    </section>
    
    <section id="transaction-stats">
      <!-- Transaction stats will be loaded here -->
    </section>
    
    <section>
      <h2>Quick Actions</h2>
      <div class="row">
        <div class="col">
          <div class="card">
            <h3>Products</h3>
            <p>Manage your products</p>
            <a href="products.html" class="button">View Products</a>
          </div>
        </div>
        <div class="col">
          <div class="card">
            <h3>Transactions</h3>
            <p>View your transaction history</p>
            <a href="transactions.html" class="button">View Transactions</a>
          </div>
        </div>
        <div class="col">
          <div class="card">
            <h3>Finance</h3>
            <p>Check your balance and payouts</p>
            <a href="finance.html" class="button">View Finance</a>
          </div>
        </div>
      </div>
    </section>
  </div>
  
  <script src="../js/utils.js"></script>
  <script src="../js/auth.js"></script>
  <script src="../js/dashboard.js"></script>
  <script>
    // Display current date
    const dateElement = document.getElementById('current-date');
    if (dateElement) {
      const now = new Date();
      dateElement.textContent = now.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    }
  </script>
</body>
</html>

merchant/products.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Products - RiskPay</title>
  <link rel="stylesheet" href="../css/main.css">
  <style>
    /* Simple modal styling */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
    }
    
    .modal-content {
      background-color: white;
      margin: 10% auto;
      padding: 20px;
      width: 80%;
      max-width: 700px;
      border-radius: 5px;
      max-height: 80vh;
      overflow-y: auto;
    }
    
    .close-modal {
      float: right;
      cursor: pointer;
      font-size: 20px;
    }
    
    /* Radio button styling */
    .radio-group {
      margin-bottom: 10px;
    }
    
    .radio-group label {
      margin-right: 15px;
      display: inline-block;
    }
    
    /* Hidden fields */
    .conditional-field {
      margin-top: 10px;
      margin-left: 20px;
    }

    /* Image previews */
    .image-preview {
      display: inline-block;
      margin: 10px;
      text-align: center;
    }

    /* Variant styling */
    .variant-row {
      border: 1px solid #eee;
      padding: 10px;
      margin-bottom: 10px;
      border-radius: 5px;
      position: relative;
    }

    .remove-variant-btn {
      background-color: #f44336;
      color: white;
      border: none;
      padding: 5px 10px;
      cursor: pointer;
      border-radius: 3px;
      position: absolute;
      right: 10px;
      top: 10px;
    }

    .remove-image-btn, .remove-new-image-btn {
      background-color: #f44336;
      color: white;
      border: none;
      padding: 3px 8px;
      cursor: pointer;
      border-radius: 3px;
      margin-top: 5px;
      font-size: 12px;
    }
    
    /* Text editor basic styling */
    .editor-toolbar {
      padding: 5px 0;
      margin-bottom: 5px;
      border-bottom: 1px solid #ddd;
    }
    
    .editor-toolbar button {
      margin-right: 5px;
      padding: 3px 8px;
      background: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 3px;
      cursor: pointer;
    }
    
    .editor-toolbar button:hover {
      background: #e9e9e9;
    }
    
    /* Shipping methods styling */
    .shipping-method-row {
      display: flex;
      align-items: center;
      margin-bottom: 8px;
      gap: 10px;
    }
    
    .shipping-method-row input {
      flex: 1;
    }
    
    .remove-shipping-method-btn {
      background-color: #f44336;
      color: white;
      border: none;
      padding: 5px 8px;
      cursor: pointer;
      border-radius: 3px;
      font-size: 12px;
    }
    
    .shipping-methods-container {
      margin-top: 15px;
    }
    
    /* Image counter */
    .image-counter {
      margin-top: 5px;
      font-size: 12px;
      color: #666;
    }
    
    /* Required field indicator */
    .required-field::after {
      content: " *";
      color: red;
    }
  </style>
</head>
<body>
  <div class="container">
    <div id="alert-container"></div>
    
    <header>
      <h1>Products</h1>
      <button id="create-product-btn-main" class="button">+ Add Product</button>
    </header>
    
    <div id="products-list">
      <!-- Products will be loaded here -->
    </div>
    
    <!-- Create Product Modal -->
    <div id="create-product-modal" class="modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2>Create Product</h2>
        
        <form id="create-product-form">
          <div class="form-group">
            <label for="product-title" class="required-field">Title</label>
            <input type="text" id="product-title" required>
          </div>
          
          <div class="form-group">
            <label for="product-short-description" class="required-field">Short Description</label>
            <textarea id="product-short-description" rows="2" maxlength="200" required></textarea>
            <small>Brief description for listings (max 200 chars)</small>
          </div>
          
          <div class="form-group">
            <label for="product-long-description" class="required-field">Long Description</label>
            <!-- Simple inline text editor toolbar -->
            <div class="editor-toolbar">
              <button type="button" data-command="bold" title="Bold"><strong>B</strong></button>
              <button type="button" data-command="italic" title="Italic"><em>I</em></button>
              <button type="button" data-command="underline" title="Underline"><u>U</u></button>
              <button type="button" data-command="insertUnorderedList" title="Bullet List">• List</button>
              <button type="button" data-command="createLink" title="Insert Link">🔗 Link</button>
            </div>
            <textarea id="product-long-description" rows="6" required></textarea>
            <small>Detailed product description with basic formatting</small>
          </div>
          
          <div class="form-group">
            <label for="product-price" class="required-field">Price</label>
            <input type="number" id="product-price" step="0.01" min="0.01" required>
          </div>
          
          <div class="form-group">
            <label for="product-currency" class="required-field">Currency</label>
            <select id="product-currency" required>
              <option value="USD">USD</option>
              <option value="BRL">BRL</option>
              <option value="EUR">EUR</option>
              <option value="GBP">GBP</option>
              <option value="CAD">CAD</option>
              <option value="AUD">AUD</option>
              <option value="JPY">JPY</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="product-type" class="required-field">Type</label>
            <select id="product-type" required>
              <option value="digital">Digital</option>
              <option value="physical">Physical</option>
            </select>
          </div>
          
          <!-- Inventory fields for both product types -->
          <div class="form-group">
            <label for="product-sku">SKU (Stock Keeping Unit)</label>
            <input type="text" id="product-sku" maxlength="100">
            <small>Optional unique identifier for your inventory</small>
          </div>
          
          <div class="form-group">
            <label for="product-barcode">Barcode (ISBN, UPC, GTIN, etc.)</label>
            <input type="text" id="product-barcode" maxlength="100">
            <small>Optional barcode identifier</small>
          </div>
          
          <div class="form-group">
            <label for="product-images" class="required-field">Upload Images</label>
            <input type="file" id="product-images" accept="image/*" multiple required>
            <small>You can select up to 10 images. The first image will be the main image by default.</small>
            <div class="image-counter">0/10 images selected</div>
          </div>

          <div id="image-previews" class="form-group">
            <!-- Image previews will be displayed here -->
          </div>
          
          <!-- Digital product fields -->
          <div id="digital-fields" style="display: none;">
            <div class="form-group">
              <label>File Method</label>
              <div class="radio-group">
                <label>
                  <input type="radio" name="file-method" value="url" checked> File URL
                </label>
                <label>
                  <input type="radio" name="file-method" value="upload"> File Upload
                </label>
              </div>
              
              <!-- URL container -->
              <div id="file-url-container" class="conditional-field">
                <label for="product-file-url">File URL</label>
                <input
                  type="text"
                  id="product-file-url"
                  name="product-file-url"
                  placeholder="https://example.com/your-file.zip"
                >
                <small>Enter the URL for the digital product file.</small>
              </div>

              <!-- Upload container -->
              <div id="file-upload-container" class="conditional-field" style="display: none;">
                <label for="product-file-upload">Upload Digital File</label>
                <input
                  type="file"
                  id="product-file-upload"
                  name="product-file-upload"
                  accept="*/*"
                >
                <small>Select the digital product file to upload.</small>
              </div>
            </div>
            
            <div class="form-group">
              <label>
                <input type="checkbox" id="product-recurring"> Recurring Subscription
              </label>
              
              <div id="recurring-options" class="conditional-field" style="display: none;">
                <label for="product-interval">Billing Interval</label>
                <select id="product-interval">
                  <option value="monthly">Monthly</option>
                  <option value="yearly">Yearly</option>
                </select>
                
                <div class="form-group">
                  <label>
                    <input type="checkbox" id="product-has-trial"> Offer Free Trial
                  </label>
                  
                  <div id="trial-options" class="conditional-field" style="display: none;">
                    <label for="product-trial-days">Trial Days</label>
                    <input type="number" id="product-trial-days" min="1" max="90" value="14">
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Physical product fields -->
          <div id="physical-fields" style="display: none;">
            <div class="form-group">
              <label>
                <input type="checkbox" id="product-has-stock" checked> Manage Stock
              </label>
              <div id="stock-field" class="conditional-field">
                <label for="product-stock">Stock Quantity</label>
                <input type="number" id="product-stock" min="0" value="0">
              </div>
            </div>

            <div class="form-group">
              <label>
                <input type="checkbox" id="product-has-variants"> Add Variants
              </label>
              
              <div id="variants-section" class="conditional-field" style="display: none;">
                <button type="button" id="add-variant-btn" class="button">+ Add Variant</button>
                <p><small>Variants can be used for different sizes, colors, etc.</small></p>
                
                <div id="variants-container">
                  <!-- Variant rows will be added here -->
                </div>
              </div>
            </div>
            
            <!-- Shipping methods section -->
            <div class="form-group">
              <label>Shipping Methods</label>
              <p><small>Add shipping methods available for this product. Set price to 0 for free shipping.</small></p>
              
              <div id="shipping-methods-container" class="shipping-methods-container">
                <!-- Shipping method rows will be added here -->
                <div class="shipping-method-row">
                    <input type="text" class="shipping-method-name" placeholder="Method name (e.g. Standard Shipping)">
                    <input type="number" class="shipping-method-price" min="0" step="0.01" placeholder="Price">
                    <button type="button" class="remove-shipping-method-btn">×</button>
                  </div>
              </div>
              
              <button type="button" id="add-shipping-method-btn" class="button">+ Add Shipping Method</button>
            </div>
          </div>
          
          <button type="submit" id="create-product-btn">Create Product</button>
        </form>
      </div>
    </div>
    
    <!-- Edit Product Modal -->
    <div id="edit-product-modal" class="modal">
      <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2>Edit Product</h2>
        
        <form id="edit-product-form">
          <input type="hidden" id="edit-product-id">
          
          <div class="form-group">
            <label for="edit-product-title" class="required-field">Title</label>
            <input type="text" id="edit-product-title" required>
          </div>
          
          <div class="form-group">
            <label for="edit-product-short-description" class="required-field">Short Description</label>
            <textarea id="edit-product-short-description" rows="2" maxlength="200" required></textarea>
            <small>Brief description for listings (max 200 chars)</small>
          </div>
          
          <div class="form-group">
            <label for="edit-product-long-description" class="required-field">Long Description</label>
            <!-- Simple inline text editor toolbar -->
            <div class="editor-toolbar">
              <button type="button" data-command="bold" title="Bold"><strong>B</strong></button>
              <button type="button" data-command="italic" title="Italic"><em>I</em></button>
              <button type="button" data-command="underline" title="Underline"><u>U</u></button>
              <button type="button" data-command="insertUnorderedList" title="Bullet List">• List</button>
              <button type="button" data-command="createLink" title="Insert Link">🔗 Link</button>
            </div>
            <textarea id="edit-product-long-description" rows="6" required></textarea>
            <small>Detailed product description with basic formatting</small>
          </div>
          
          <!-- Keep old description field for backward compatibility -->
          <input type="hidden" id="edit-product-description">
          
          <div class="form-group">
            <label for="edit-product-price" class="required-field">Price</label>
            <input type="number" id="edit-product-price" step="0.01" min="0.01" required>
          </div>
          
          <div class="form-group">
            <label for="edit-product-currency" class="required-field">Currency</label>
            <select id="edit-product-currency" required>
              <option value="USD">USD</option>
              <option value="BRL">BRL</option>
              <option value="EUR">EUR</option>
              <option value="GBP">GBP</option>
              <option value="CAD">CAD</option>
              <option value="AUD">AUD</option>
              <option value="JPY">JPY</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="edit-product-type" class="required-field">Type</label>
            <select id="edit-product-type" required>
              <option value="digital">Digital</option>
              <option value="physical">Physical</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="edit-product-status">Status</label>
            <select id="edit-product-status" required>
              <option value="active">Active</option>
              <option value="deactivated">Deactivated</option>
            </select>
          </div>
          
          <!-- Inventory fields -->
          <div class="form-group">
            <label for="edit-product-sku">SKU (Stock Keeping Unit)</label>
            <input type="text" id="edit-product-sku" maxlength="100">
            <small>Optional unique identifier for your inventory</small>
          </div>
          
          <div class="form-group">
            <label for="edit-product-barcode">Barcode (ISBN, UPC, GTIN, etc.)</label>
            <input type="text" id="edit-product-barcode" maxlength="100">
            <small>Optional barcode identifier</small>
          </div>
          
          <div class="form-group">
            <label>Current Images</label>
            <div id="edit-image-previews">
              <!-- Existing images will be shown here -->
            </div>
          </div>

          <div class="form-group">
            <label for="edit-product-new-images">Add New Images</label>
            <input type="file" id="edit-product-new-images" accept="image/*" multiple>
            <small>Add new images (maximum 10 total images per product)</small>
            <div class="image-counter" id="edit-image-counter"></div>
          </div>
          
          <!-- Digital product fields -->
          <div id="edit-digital-fields" style="display: none;">
            <div class="form-group">
              <label>File Method</label>
              <div class="radio-group">
                <label>
                  <input type="radio" name="edit-file-method" value="url" id="edit-file-method-url" checked> File URL
                </label>
                <label>
                  <input type="radio" name="edit-file-method" value="upload" id="edit-file-method-upload"> File Upload
                </label>
              </div>
              
              <div id="edit-file-url-container" class="conditional-field">
                <label for="edit-product-file-url">File URL</label>
                <input
                  type="text"
                  id="edit-product-file-url"
                  name="edit-product-file-url"
                >
                <small>URL where customers can download the digital product.</small>
              </div>
              
              <div id="edit-file-upload-container" class="conditional-field" style="display: none;">
                <div id="edit-current-file-name" style="display: none; margin-bottom: 10px;"></div>
                <label for="edit-product-file-upload">Upload New File</label>
                <input
                  type="file"
                  id="edit-product-file-upload"
                  name="edit-product-file-upload"
                  accept="*/*"
                >
                <small>Upload a new file to replace the current one.</small>
              </div>
            </div>
            
            <div class="form-group">
              <label>
                <input type="checkbox" id="edit-product-recurring"> Recurring Subscription
              </label>
              
              <div id="edit-recurring-options" class="conditional-field" style="display: none;">
                <label for="edit-product-interval">Billing Interval</label>
                <select id="edit-product-interval">
                  <option value="monthly">Monthly</option>
                  <option value="yearly">Yearly</option>
                </select>
                
                <div class="form-group">
                  <label>
                    <input type="checkbox" id="edit-product-has-trial"> Offer Free Trial
                  </label>
                  
                  <div id="edit-trial-options" class="conditional-field" style="display: none;">
                    <label for="edit-product-trial-days">Trial Days</label>
                    <input type="number" id="edit-product-trial-days" min="1" max="90" value="14">
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Physical product fields -->
          <div id="edit-physical-fields" style="display: none;">
            <div class="form-group">
              <label>
                <input type="checkbox" id="edit-product-has-stock" checked> Manage Stock
              </label>
              <div id="edit-stock-field" class="conditional-field">
                <label for="edit-product-stock">Stock Quantity</label>
                <input type="number" id="edit-product-stock" min="0" value="0">
              </div>
            </div>

            <div class="form-group">
              <label>
                <input type="checkbox" id="edit-product-has-variants"> Add Variants
              </label>
              
              <div id="edit-variants-section" class="conditional-field" style="display: none;">
                <button type="button" id="edit-add-variant-btn" class="button">+ Add Variant</button>
                <p><small>Variants can be used for different sizes, colors, etc.</small></p>
                
                <div id="edit-variants-container">
                  <!-- Variant rows will be added here -->
                </div>
              </div>
            </div>
            
            <!-- Shipping methods section -->
            <div class="form-group">
              <label>Shipping Methods</label>
              <p><small>Add shipping methods available for this product. Set price to 0 for free shipping.</small></p>
              
              <div id="edit-shipping-methods-container" class="shipping-methods-container">
                <!-- Shipping method rows will be added here -->
              </div>
              
              <button type="button" id="edit-add-shipping-method-btn" class="button">+ Add Shipping Method</button>
            </div>
          </div>
          
          <button type="submit" id="update-product-btn">Update Product</button>
        </form>
      </div>
    </div>
  </div>
  
  <script src="../js/utils.js"></script>
  <script src="../js/auth.js"></script>
  <script src="../js/products.js"></script>
  
  <!-- Simple text editor functionality -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // For create product form
      initializeTextEditor('product-long-description');
      
      // For edit product form
      initializeTextEditor('edit-product-long-description');
    });
    
    function initializeTextEditor(textareaId) {
      const textarea = document.getElementById(textareaId);
      if (!textarea) return;
      
      // Get all buttons for this editor
      const toolbarButtons = textarea.closest('.form-group').querySelectorAll('.editor-toolbar button');
      
      // Add click event to buttons
      toolbarButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          const command = this.getAttribute('data-command');
          
          if (command === 'createLink') {
            const url = prompt('Enter the link URL:');
            if (url) {
              // Insert a link at cursor position or around selected text
              insertAtCursor(textarea, `<a href="${url}" target="_blank">${getSelectedText(textarea) || 'link text'}</a>`);
            }
          } else {
            // Insert HTML tags based on command
            let startTag = '', endTag = '';
            
            switch(command) {
              case 'bold':
                startTag = '<strong>';
                endTag = '</strong>';
                break;
              case 'italic':
                startTag = '<em>';
                endTag = '</em>';
                break;
              case 'underline':
                startTag = '<u>';
                endTag = '</u>';
                break;
              case 'insertUnorderedList':
                startTag = '<ul>\n<li>';
                endTag = '</li>\n</ul>';
                break;
            }
            
            wrapSelectedText(textarea, startTag, endTag);
          }
        });
      });
    }
    
    // Helper function to get selected text in textarea
    function getSelectedText(textarea) {
      return textarea.value.substring(textarea.selectionStart, textarea.selectionEnd);
    }
    
    // Helper function to wrap selected text with tags
    function wrapSelectedText(textarea, startTag, endTag) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selectedText = textarea.value.substring(start, end);
      const replacement = startTag + selectedText + endTag;
      
      textarea.value = textarea.value.substring(0, start) + replacement + textarea.value.substring(end);
      
      // Put cursor after inserted content
      textarea.selectionStart = textarea.selectionEnd = start + replacement.length;
      textarea.focus();
    }
    
    // Helper function to insert text at cursor position
    function insertAtCursor(textarea, text) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      
      textarea.value = textarea.value.substring(0, start) + text + textarea.value.substring(end);
      
      // Put cursor after inserted content
      textarea.selectionStart = textarea.selectionEnd = start + text.length;
      textarea.focus();
    }
  </script>
</body>
</html>

merchant/transactions.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Transactions - RiskPay</title>
  <link rel="stylesheet" href="../css/main.css">
</head>
<body>
  <div class="container">
    <div id="alert-container"></div>
    
    <header>
      <h1>Transactions</h1>
    </header>
    
    <div class="card" style="margin-bottom: 20px;">
      <h3>Filters</h3>
      <form id="filter-form">
        <div class="row">
          <div class="col">
            <div class="form-group">
              <label for="filter-status">Status</label>
              <select id="filter-status">
                <option value="all">All</option>
                <option value="succeeded">Succeeded</option>
                <option value="pending">Pending</option>
                <option value="failed">Failed</option>
                <option value="refunded">Refunded</option>
                <option value="chargeback">Chargeback</option>
              </select>
            </div>
          </div>
          
          <div class="col">
            <div class="form-group">
              <label for="filter-from-date">From Date</label>
              <input type="date" id="filter-from-date">
            </div>
          </div>
          
          <div class="col">
            <div class="form-group">
              <label for="filter-to-date">To Date</label>
              <input type="date" id="filter-to-date">
            </div>
          </div>
        </div>
        
        <div>
          <button type="submit">Apply Filters</button>
          <button type="button" id="reset-filters-btn">Reset</button>
        </div>
      </form>
    </div>
    
    <div id="transactions-list">
      <!-- Transactions will be loaded here -->
    </div>
  </div>
  
  <script src="../js/utils.js"></script>
  <script src="../js/auth.js"></script>
  <script src="../js/transactions.js"></script>
</body>
</html>

register.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Register - RiskPay</title>
  <link rel="stylesheet" href="css/main.css">
</head>
<body>
  <div class="container">
    <header>
      <h1>RiskPay</h1>
      <nav>
        <ul>
          <li><a href="login.html">Login</a></li>
        </ul>
      </nav>
    </header>
    
    <div id="alert-container"></div>
    
    <div class="card" style="max-width: 500px; margin: 0 auto;">
      <h2>Register</h2>
      <form id="register-form">
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" required>
        </div>
        
        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" required>
        </div>
        
        <div class="form-group">
          <label for="confirm-password">Confirm Password</label>
          <input type="password" id="confirm-password" required>
        </div>
        
        <button type="submit" id="register-btn">Register</button>
      </form>
      
      <p style="margin-top: 20px;">
        Already have an account? <a href="login.html">Login here</a>
      </p>
    </div>
  </div>
  
  <script src="js/utils.js"></script>
  <script src="js/auth.js"></script>
</body>
</html>

